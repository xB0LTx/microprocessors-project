
Projekt_mikroprocesory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c4  080041c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041cc  080041cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080041d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  2000005c  08004230  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f48  08004230  00020f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008cb1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001994  00000000  00000000  00028d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  0002a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d1  00000000  00000000  0002aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ae0  00000000  00000000  0002b491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f12  00000000  00000000  00040f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085aeb  00000000  00000000  0004ae83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002414  00000000  00000000  000d0970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d2d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e84 	.word	0x08003e84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003e84 	.word	0x08003e84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <USART_fsend>:
static void MX_USART2_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void USART_fsend(char* format, ...) {
 800058c:	b40f      	push	{r0, r1, r2, r3}
 800058e:	b580      	push	{r7, lr}
 8000590:	b0a4      	sub	sp, #144	; 0x90
 8000592:	af00      	add	r7, sp, #0
    char tmp_rs[128];
    int i;
    __IO int idx;
    va_list arglist;
    va_start(arglist, format);
 8000594:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000598:	607b      	str	r3, [r7, #4]
    vsprintf(tmp_rs, format, arglist);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 ffb7 	bl	8003518 <vsiprintf>
    va_end(arglist);
    idx = USART_TX_Empty;
 80005aa:	4b30      	ldr	r3, [pc, #192]	; (800066c <USART_fsend+0xe0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < strlen(tmp_rs); i++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80005b6:	e017      	b.n	80005e8 <USART_fsend+0x5c>
        USART_TxBuf[idx] = tmp_rs[i];
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	f107 010c 	add.w	r1, r7, #12
 80005be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80005c2:	440a      	add	r2, r1
 80005c4:	7811      	ldrb	r1, [r2, #0]
 80005c6:	4a2a      	ldr	r2, [pc, #168]	; (8000670 <USART_fsend+0xe4>)
 80005c8:	54d1      	strb	r1, [r2, r3]
        idx++;
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
        if (idx >= USART_TXBUF_LEN) idx = 0;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	f640 32e9 	movw	r2, #3049	; 0xbe9
 80005d6:	4293      	cmp	r3, r2
 80005d8:	dd01      	ble.n	80005de <USART_fsend+0x52>
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < strlen(tmp_rs); i++) {
 80005de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005e2:	3301      	adds	r3, #1
 80005e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdf7 	bl	80001e0 <strlen>
 80005f2:	4602      	mov	r2, r0
 80005f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8dd      	bhi.n	80005b8 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
    }
    __disable_irq();
    if ((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <USART_fsend+0xe0>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <USART_fsend+0xe8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d123      	bne.n	8000654 <USART_fsend+0xc8>
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <USART_fsend+0xec>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	2b80      	cmp	r3, #128	; 0x80
 8000618:	d11c      	bne.n	8000654 <USART_fsend+0xc8>
        USART_TX_Empty = idx;
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <USART_fsend+0xe0>)
 800061e:	6013      	str	r3, [r2, #0]
        uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <USART_fsend+0xe8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <USART_fsend+0xe4>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	70fb      	strb	r3, [r7, #3]
        USART_TX_Busy++;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <USART_fsend+0xe8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	4a10      	ldr	r2, [pc, #64]	; (8000674 <USART_fsend+0xe8>)
 8000632:	6013      	str	r3, [r2, #0]
        if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <USART_fsend+0xe8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f640 32e9 	movw	r2, #3049	; 0xbe9
 800063c:	4293      	cmp	r3, r2
 800063e:	dd02      	ble.n	8000646 <USART_fsend+0xba>
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <USART_fsend+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <USART_fsend+0xec>)
 800064e:	f001 ff58 	bl	8002502 <HAL_UART_Transmit_IT>
    if ((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000652:	e002      	b.n	800065a <USART_fsend+0xce>
    }
    else {
        USART_TX_Empty = idx;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <USART_fsend+0xe0>)
 8000658:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800065a:	b662      	cpsie	i
}
 800065c:	bf00      	nop
    }
    __enable_irq();
}  // fsend
 800065e:	bf00      	nop
 8000660:	3790      	adds	r7, #144	; 0x90
 8000662:	46bd      	mov	sp, r7
 8000664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000668:	b004      	add	sp, #16
 800066a:	4770      	bx	lr
 800066c:	20000de4 	.word	0x20000de4
 8000670:	200000c4 	.word	0x200000c4
 8000674:	20000de8 	.word	0x20000de8
 8000678:	20000080 	.word	0x20000080

0800067c <USART_kbhit>:

uint8_t USART_kbhit() {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
    if (USART_RX_Empty == USART_RX_Busy) {
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <USART_kbhit+0x20>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <USART_kbhit+0x24>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d101      	bne.n	8000690 <USART_kbhit+0x14>
        return 0;
 800068c:	2300      	movs	r3, #0
 800068e:	e000      	b.n	8000692 <USART_kbhit+0x16>
    }
    else {
        return 1;
 8000690:	2301      	movs	r3, #1
    }
}  // USART_kbhit
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20000dec 	.word	0x20000dec
 80006a0:	20000df0 	.word	0x20000df0

080006a4 <USART_getchar>:

int16_t USART_getchar() {
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
    int16_t tmp;
    if (USART_RX_Empty != USART_RX_Busy) {
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <USART_getchar+0x4c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <USART_getchar+0x50>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d014      	beq.n	80006e0 <USART_getchar+0x3c>
        tmp = USART_RxBuf[USART_RX_Busy];
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <USART_getchar+0x50>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <USART_getchar+0x54>)
 80006bc:	5cd3      	ldrb	r3, [r2, r3]
 80006be:	80fb      	strh	r3, [r7, #6]
        USART_RX_Busy++;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <USART_getchar+0x50>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <USART_getchar+0x50>)
 80006c8:	6013      	str	r3, [r2, #0]
        if (USART_RX_Busy >= USART_RXBUF_LEN) USART_RX_Busy = 0;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <USART_getchar+0x50>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80006d2:	dd02      	ble.n	80006da <USART_getchar+0x36>
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <USART_getchar+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
        return tmp;
 80006da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006de:	e001      	b.n	80006e4 <USART_getchar+0x40>
    }
    else {
        return -1;
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}  // USART_getchar
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20000dec 	.word	0x20000dec
 80006f4:	20000df0 	.word	0x20000df0
 80006f8:	20000cb0 	.word	0x20000cb0

080006fc <VIEWLAST>:

void VIEWLAST(char* buf){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "005D") != NULL){
 8000704:	4908      	ldr	r1, [pc, #32]	; (8000728 <VIEWLAST+0x2c>)
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f002 ff2a 	bl	8003560 <strstr>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <VIEWLAST+0x1e>
		USART_fsend(" ,STMHST0251 15.56 16:00 24.01.20245FFA;\r\n");
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <VIEWLAST+0x30>)
 8000714:	f7ff ff3a 	bl	800058c <USART_fsend>
	}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
} //VIEWLAST
 8000718:	e002      	b.n	8000720 <VIEWLAST+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <VIEWLAST+0x34>)
 800071c:	f7ff ff36 	bl	800058c <USART_fsend>
} //VIEWLAST
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08003e9c 	.word	0x08003e9c
 800072c:	08003ea4 	.word	0x08003ea4
 8000730:	08003ed0 	.word	0x08003ed0

08000734 <CHCDEV>:

void CHCDEV(char* buf){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "C209") != NULL){
 800073c:	4908      	ldr	r1, [pc, #32]	; (8000760 <CHCDEV+0x2c>)
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f002 ff0e 	bl	8003560 <strstr>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <CHCDEV+0x1e>
		USART_fsend(" ,STMHST0261 AB CD EF 12 34 56 78 9A5E78;\r\n");
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <CHCDEV+0x30>)
 800074c:	f7ff ff1e 	bl	800058c <USART_fsend>
	}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
} //CHCDEV
 8000750:	e002      	b.n	8000758 <CHCDEV+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <CHCDEV+0x34>)
 8000754:	f7ff ff1a 	bl	800058c <USART_fsend>
} //CHCDEV
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08003eec 	.word	0x08003eec
 8000764:	08003ef4 	.word	0x08003ef4
 8000768:	08003ed0 	.word	0x08003ed0

0800076c <SRCDEV>:

void SRCDEV(char* buf){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "9052") != NULL){
 8000774:	4908      	ldr	r1, [pc, #32]	; (8000798 <SRCDEV+0x2c>)
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f002 fef2 	bl	8003560 <strstr>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <SRCDEV+0x1e>
			USART_fsend(" ,STMHST0261 AB CD EF 12 34 56 78 9A5E78;\r\n");
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <SRCDEV+0x30>)
 8000784:	f7ff ff02 	bl	800058c <USART_fsend>
		}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
} //SRCDEV
 8000788:	e002      	b.n	8000790 <SRCDEV+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <SRCDEV+0x34>)
 800078c:	f7ff fefe 	bl	800058c <USART_fsend>
} //SRCDEV
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	08003f20 	.word	0x08003f20
 800079c:	08003ef4 	.word	0x08003ef4
 80007a0:	08003ed0 	.word	0x08003ed0

080007a4 <CHCINT>:

void CHCINT(char* buf){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "9052") != NULL){
 80007ac:	4908      	ldr	r1, [pc, #32]	; (80007d0 <CHCINT+0x2c>)
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f002 fed6 	bl	8003560 <strstr>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <CHCINT+0x1e>
			USART_fsend(" ,STMHST0039994F02;\r\n");
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <CHCINT+0x30>)
 80007bc:	f7ff fee6 	bl	800058c <USART_fsend>
		}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
} //CHCINT
 80007c0:	e002      	b.n	80007c8 <CHCINT+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <CHCINT+0x34>)
 80007c4:	f7ff fee2 	bl	800058c <USART_fsend>
} //CHCINT
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08003f20 	.word	0x08003f20
 80007d4:	08003f28 	.word	0x08003f28
 80007d8:	08003ed0 	.word	0x08003ed0

080007dc <VIEWR>:

void VIEWR(char* buf){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "AAAA") != NULL){
 80007e4:	4908      	ldr	r1, [pc, #32]	; (8000808 <VIEWR+0x2c>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f002 feba 	bl	8003560 <strstr>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <VIEWR+0x1e>
			USART_fsend(" ,STMHST0251 15.56 16:00 24.01.2024\r\n2 15.56 16:01 24.01.2024\r\n3 15.56 16:02 24.01.2024\r\n\24B4;\r\n");
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <VIEWR+0x30>)
 80007f4:	f7ff feca 	bl	800058c <USART_fsend>
		}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
}
 80007f8:	e002      	b.n	8000800 <VIEWR+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <VIEWR+0x34>)
 80007fc:	f7ff fec6 	bl	800058c <USART_fsend>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	08003f40 	.word	0x08003f40
 800080c:	08003f48 	.word	0x08003f48
 8000810:	08003ed0 	.word	0x08003ed0

08000814 <VIEW>:

void VIEW(char* buf){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "BBBB") != NULL){
 800081c:	4908      	ldr	r1, [pc, #32]	; (8000840 <VIEW+0x2c>)
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f002 fe9e 	bl	8003560 <strstr>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d003      	beq.n	8000832 <VIEW+0x1e>
			USART_fsend(" ,STMHST0251 15.56 16:00 24.01.20245FFA;\r\n");
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <VIEW+0x30>)
 800082c:	f7ff feae 	bl	800058c <USART_fsend>
		}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
}
 8000830:	e002      	b.n	8000838 <VIEW+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <VIEW+0x34>)
 8000834:	f7ff feaa 	bl	800058c <USART_fsend>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	08003fa8 	.word	0x08003fa8
 8000844:	08003ea4 	.word	0x08003ea4
 8000848:	08003ed0 	.word	0x08003ed0

0800084c <CHGDEV>:

void CHGDEV(char* buf){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "CCCC") != NULL){
 8000854:	4908      	ldr	r1, [pc, #32]	; (8000878 <CHGDEV+0x2c>)
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f002 fe82 	bl	8003560 <strstr>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <CHGDEV+0x1e>
			USART_fsend(" ,STMHST007SUCCESS5352;\r\n");
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <CHGDEV+0x30>)
 8000864:	f7ff fe92 	bl	800058c <USART_fsend>
		}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
}
 8000868:	e002      	b.n	8000870 <CHGDEV+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <CHGDEV+0x34>)
 800086c:	f7ff fe8e 	bl	800058c <USART_fsend>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08003fb0 	.word	0x08003fb0
 800087c:	08003fb8 	.word	0x08003fb8
 8000880:	08003ed0 	.word	0x08003ed0

08000884 <CHGINT>:

void CHGINT(char* buf){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if(strstr(buf, "DDDD") != NULL){
 800088c:	4908      	ldr	r1, [pc, #32]	; (80008b0 <CHGINT+0x2c>)
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f002 fe66 	bl	8003560 <strstr>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d003      	beq.n	80008a2 <CHGINT+0x1e>
			USART_fsend(" ,STMHST007SUCCESS5352;\r\n");
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <CHGINT+0x30>)
 800089c:	f7ff fe76 	bl	800058c <USART_fsend>
		}
	else{
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
	}
}
 80008a0:	e002      	b.n	80008a8 <CHGINT+0x24>
			USART_fsend(" ,STMHST009CCHSUMINC961B;\r\n");
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <CHGINT+0x34>)
 80008a4:	f7ff fe72 	bl	800058c <USART_fsend>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08003fd4 	.word	0x08003fd4
 80008b4:	08003fb8 	.word	0x08003fb8
 80008b8:	08003ed0 	.word	0x08003ed0

080008bc <USART_validateFrameHST>:

uint8_t USART_validateFrameHST(char *buf, uint8_t length) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0d0      	sub	sp, #320	; 0x140
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80008ca:	6018      	str	r0, [r3, #0]
 80008cc:	460a      	mov	r2, r1
 80008ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008d2:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 80008d6:	701a      	strb	r2, [r3, #0]
	char receiver[4];
	memcpy(receiver, buf + 4, 3);
 80008d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	1d19      	adds	r1, r3, #4
 80008e4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80008e8:	2203      	movs	r2, #3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fe7a 	bl	80035e4 <memcpy>
	receiver[3]='\0';
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	char command_length[4];
	memcpy(command_length, buf + 7, 3);
 80008f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80008fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1dd9      	adds	r1, r3, #7
 8000902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000906:	2203      	movs	r2, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fe6b 	bl	80035e4 <memcpy>
	command_length[3] = '\0';
 800090e:	2300      	movs	r3, #0
 8000910:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint16_t command_length_int = atoi(command_length);
 8000914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fd57 	bl	80033cc <atoi>
 800091e:	4603      	mov	r3, r0
 8000920:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	char command[291];
	uint16_t command_start = 10;
 8000924:	230a      	movs	r3, #10
 8000926:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t command_end = length-6;
 800092a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800092e:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	3b06      	subs	r3, #6
 8000938:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
	if(strncmp(receiver, "STM", 3) != 0){
 800093c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000940:	2203      	movs	r2, #3
 8000942:	496e      	ldr	r1, [pc, #440]	; (8000afc <USART_validateFrameHST+0x240>)
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fdf9 	bl	800353c <strncmp>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <USART_validateFrameHST+0x98>
	    	return 0;
 8000950:	2300      	movs	r3, #0
 8000952:	e0cd      	b.n	8000af0 <USART_validateFrameHST+0x234>
	    }
	if(command_length_int == 0){
 8000954:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8000958:	2b00      	cmp	r3, #0
 800095a:	d105      	bne.n	8000968 <USART_validateFrameHST+0xac>
		USART_fsend(" ,STMHST007CMDLEN0E7BF;\r\n", 64);
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4868      	ldr	r0, [pc, #416]	; (8000b00 <USART_validateFrameHST+0x244>)
 8000960:	f7ff fe14 	bl	800058c <USART_fsend>
		return 0;
 8000964:	2300      	movs	r3, #0
 8000966:	e0c3      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
	else if(command_length_int == (command_end - command_start + 1)){
 8000968:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 800096c:	f8b7 113a 	ldrh.w	r1, [r7, #314]	; 0x13a
 8000970:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8000974:	1acb      	subs	r3, r1, r3
 8000976:	3301      	adds	r3, #1
 8000978:	429a      	cmp	r2, r3
 800097a:	d121      	bne.n	80009c0 <USART_validateFrameHST+0x104>
		memcpy(command, buf + command_start, command_length_int);
 800097c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8000980:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000984:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	18d1      	adds	r1, r2, r3
 800098c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fe25 	bl	80035e4 <memcpy>
		command[291]='\0';
 800099a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800099e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
	}
	else{
		USART_fsend(" ,STMHST009CMDLENINCF295;\r\n", 64);
		return 0;
	}
	if(strncmp(command, "VIEWLAST", command_length_int) == 0){
 80009a8:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4954      	ldr	r1, [pc, #336]	; (8000b04 <USART_validateFrameHST+0x248>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fdc2 	bl	800353c <strncmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10f      	bne.n	80009de <USART_validateFrameHST+0x122>
 80009be:	e005      	b.n	80009cc <USART_validateFrameHST+0x110>
		USART_fsend(" ,STMHST009CMDLENINCF295;\r\n", 64);
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	4851      	ldr	r0, [pc, #324]	; (8000b08 <USART_validateFrameHST+0x24c>)
 80009c4:	f7ff fde2 	bl	800058c <USART_fsend>
		return 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e091      	b.n	8000af0 <USART_validateFrameHST+0x234>
		VIEWLAST(buf);
 80009cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80009d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	f7ff fe91 	bl	80006fc <VIEWLAST>
		return 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	e088      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
	if(strncmp(command, "CHCDEV", command_length_int) == 0){
 80009de:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4949      	ldr	r1, [pc, #292]	; (8000b0c <USART_validateFrameHST+0x250>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fda7 	bl	800353c <strncmp>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d108      	bne.n	8000a06 <USART_validateFrameHST+0x14a>
		CHCDEV(buf);
 80009f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80009f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	f7ff fe99 	bl	8000734 <CHCDEV>
		return 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e074      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
	if(strncmp(command, "SRCDEV", command_length_int) == 0){
 8000a06:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	4940      	ldr	r1, [pc, #256]	; (8000b10 <USART_validateFrameHST+0x254>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fd93 	bl	800353c <strncmp>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d108      	bne.n	8000a2e <USART_validateFrameHST+0x172>
		SRCDEV(buf);
 8000a1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a20:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	f7ff fea1 	bl	800076c <SRCDEV>
		return 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e060      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
	if(strncmp(command, "CHCINT", command_length_int) == 0){
 8000a2e:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4937      	ldr	r1, [pc, #220]	; (8000b14 <USART_validateFrameHST+0x258>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fd7f 	bl	800353c <strncmp>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d108      	bne.n	8000a56 <USART_validateFrameHST+0x19a>
		CHCINT(buf);
 8000a44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	f7ff fea9 	bl	80007a4 <CHCINT>
		return 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e04c      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
	if(strstr(command, "VIEWR") != NULL){
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	492f      	ldr	r1, [pc, #188]	; (8000b18 <USART_validateFrameHST+0x25c>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fd7f 	bl	8003560 <strstr>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d008      	beq.n	8000a7a <USART_validateFrameHST+0x1be>
		VIEWR(buf);
 8000a68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	f7ff feb3 	bl	80007dc <VIEWR>
		return 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e03a      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
	else{
		if(strstr(command, "VIEW") != NULL){
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4927      	ldr	r1, [pc, #156]	; (8000b1c <USART_validateFrameHST+0x260>)
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fd6d 	bl	8003560 <strstr>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <USART_validateFrameHST+0x1e2>
			VIEW(buf);
 8000a8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	f7ff febd 	bl	8000814 <VIEW>
			return 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e028      	b.n	8000af0 <USART_validateFrameHST+0x234>
		}
	}
	if(strstr(command, "CHGDEV") != NULL){
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	491f      	ldr	r1, [pc, #124]	; (8000b20 <USART_validateFrameHST+0x264>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fd5b 	bl	8003560 <strstr>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d008      	beq.n	8000ac2 <USART_validateFrameHST+0x206>
		CHGDEV(buf);
 8000ab0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ab4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f7ff fec7 	bl	800084c <CHGDEV>
		return 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e016      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
	if(strstr(command, "CHGINT") != NULL){
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4917      	ldr	r1, [pc, #92]	; (8000b24 <USART_validateFrameHST+0x268>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fd49 	bl	8003560 <strstr>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <USART_validateFrameHST+0x22a>
		CHGINT(buf);
 8000ad4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ad8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	f7ff fed1 	bl	8000884 <CHGINT>
		return 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e004      	b.n	8000af0 <USART_validateFrameHST+0x234>
	}
    else {
    	USART_fsend(" ,STMHST006CMDINC8A93;\r\n", 64);
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <USART_validateFrameHST+0x26c>)
 8000aea:	f7ff fd4f 	bl	800058c <USART_fsend>
        return 0;
 8000aee:	2300      	movs	r3, #0
    }
} //USART_validateframeHST
 8000af0:	4618      	mov	r0, r3
 8000af2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	08003fdc 	.word	0x08003fdc
 8000b00:	08003fe0 	.word	0x08003fe0
 8000b04:	08004018 	.word	0x08004018
 8000b08:	08003ffc 	.word	0x08003ffc
 8000b0c:	08004024 	.word	0x08004024
 8000b10:	0800402c 	.word	0x0800402c
 8000b14:	08004034 	.word	0x08004034
 8000b18:	0800403c 	.word	0x0800403c
 8000b1c:	08004044 	.word	0x08004044
 8000b20:	0800404c 	.word	0x0800404c
 8000b24:	08004054 	.word	0x08004054
 8000b28:	0800405c 	.word	0x0800405c

08000b2c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_UART_TxCpltCallback+0x58>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d11f      	bne.n	8000b7c <HAL_UART_TxCpltCallback+0x50>
        if (USART_TX_Empty != USART_TX_Busy) {
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_UART_TxCpltCallback+0x5c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_UART_TxCpltCallback+0x60>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d019      	beq.n	8000b7c <HAL_UART_TxCpltCallback+0x50>
            uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_UART_TxCpltCallback+0x60>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_UART_TxCpltCallback+0x64>)
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	73fb      	strb	r3, [r7, #15]
            USART_TX_Busy++;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_UART_TxCpltCallback+0x60>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_UART_TxCpltCallback+0x60>)
 8000b5a:	6013      	str	r3, [r2, #0]
            if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_UART_TxCpltCallback+0x60>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f640 32e9 	movw	r2, #3049	; 0xbe9
 8000b64:	4293      	cmp	r3, r2
 8000b66:	dd02      	ble.n	8000b6e <HAL_UART_TxCpltCallback+0x42>
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_UART_TxCpltCallback+0x60>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000b6e:	f107 030f 	add.w	r3, r7, #15
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <HAL_UART_TxCpltCallback+0x58>)
 8000b78:	f001 fcc3 	bl	8002502 <HAL_UART_Transmit_IT>
        }
    }
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000080 	.word	0x20000080
 8000b88:	20000de4 	.word	0x20000de4
 8000b8c:	20000de8 	.word	0x20000de8
 8000b90:	200000c4 	.word	0x200000c4

08000b94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_UART_RxCpltCallback+0x44>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d115      	bne.n	8000bd0 <HAL_UART_RxCpltCallback+0x3c>
        USART_RX_Empty++;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_UART_RxCpltCallback+0x48>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <HAL_UART_RxCpltCallback+0x48>)
 8000bac:	6013      	str	r3, [r2, #0]
        if (USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty = 0;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_UART_RxCpltCallback+0x48>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000bb6:	dd02      	ble.n	8000bbe <HAL_UART_RxCpltCallback+0x2a>
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_UART_RxCpltCallback+0x48>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_UART_RxCpltCallback+0x48>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_UART_RxCpltCallback+0x4c>)
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <HAL_UART_RxCpltCallback+0x44>)
 8000bcc:	f001 fcde 	bl	800258c <HAL_UART_Receive_IT>
    }
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000080 	.word	0x20000080
 8000bdc:	20000dec 	.word	0x20000dec
 8000be0:	20000cb0 	.word	0x20000cb0

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ce      	sub	sp, #312	; 0x138
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f000 fbd5 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f967 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f000 fa0f 	bl	8001014 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf6:	f000 f9e3 	bl	8000fc0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000bfa:	f000 f9cd 	bl	8000f98 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    HAL_UART_Receive_IT(&huart2, &USART_RxBuf[0], 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	49ab      	ldr	r1, [pc, #684]	; (8000eb0 <main+0x2cc>)
 8000c02:	48ac      	ldr	r0, [pc, #688]	; (8000eb4 <main+0x2d0>)
 8000c04:	f001 fcc2 	bl	800258c <HAL_UART_Receive_IT>
    char buf[305]={0};
 8000c08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	3304      	adds	r3, #4
 8000c16:	f240 122d 	movw	r2, #301	; 0x12d
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fc85 	bl	800352c <memset>
    static uint8_t idx = 0;
	uint8_t i;
	char znak = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	static uint8_t flag = 0;
    while (1) {
    	    if (USART_kbhit()) {
 8000c28:	f7ff fd28 	bl	800067c <USART_kbhit>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0fa      	beq.n	8000c28 <main+0x44>
    	        znak = USART_getchar();
 8000c32:	f7ff fd37 	bl	80006a4 <USART_getchar>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
    	        if (znak == ',') {
 8000c3c:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000c40:	2b2c      	cmp	r3, #44	; 0x2c
 8000c42:	d12d      	bne.n	8000ca0 <main+0xbc>
    	            for (i = 0; i <= idx; i++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000c4a:	e00c      	b.n	8000c66 <main+0x82>
    	                buf[i] = 0;
 8000c4c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000c50:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000c54:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8000c58:	2100      	movs	r1, #0
 8000c5a:	54d1      	strb	r1, [r2, r3]
    	            for (i = 0; i <= idx; i++) {
 8000c5c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000c60:	3301      	adds	r3, #1
 8000c62:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000c66:	4b94      	ldr	r3, [pc, #592]	; (8000eb8 <main+0x2d4>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d9ec      	bls.n	8000c4c <main+0x68>
    	            }
    	        	flag=0;
 8000c72:	4b92      	ldr	r3, [pc, #584]	; (8000ebc <main+0x2d8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    	            idx = 0;
 8000c78:	4b8f      	ldr	r3, [pc, #572]	; (8000eb8 <main+0x2d4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
    	            buf[idx]=znak;
 8000c7e:	4b8e      	ldr	r3, [pc, #568]	; (8000eb8 <main+0x2d4>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4619      	mov	r1, r3
 8000c84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000c88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000c8c:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 8000c90:	545a      	strb	r2, [r3, r1]
    	            idx++;
 8000c92:	4b89      	ldr	r3, [pc, #548]	; (8000eb8 <main+0x2d4>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b87      	ldr	r3, [pc, #540]	; (8000eb8 <main+0x2d4>)
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e7c3      	b.n	8000c28 <main+0x44>

    	        }
    	        else if(znak=='!' && flag==0 && buf[0]==','){
 8000ca0:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000ca4:	2b21      	cmp	r3, #33	; 0x21
 8000ca6:	d10e      	bne.n	8000cc6 <main+0xe2>
 8000ca8:	4b84      	ldr	r3, [pc, #528]	; (8000ebc <main+0x2d8>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10a      	bne.n	8000cc6 <main+0xe2>
 8000cb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000cb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b2c      	cmp	r3, #44	; 0x2c
 8000cbc:	d103      	bne.n	8000cc6 <main+0xe2>
    	        	flag = 1;
 8000cbe:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <main+0x2d8>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e0f3      	b.n	8000eae <main+0x2ca>
    	        }
    	        else if(znak=='!' && flag==1 && buf[0]==','){
 8000cc6:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000cca:	2b21      	cmp	r3, #33	; 0x21
 8000ccc:	d11d      	bne.n	8000d0a <main+0x126>
 8000cce:	4b7b      	ldr	r3, [pc, #492]	; (8000ebc <main+0x2d8>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d119      	bne.n	8000d0a <main+0x126>
 8000cd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000cda:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b2c      	cmp	r3, #44	; 0x2c
 8000ce2:	d112      	bne.n	8000d0a <main+0x126>
					buf[idx]='!';
 8000ce4:	4b74      	ldr	r3, [pc, #464]	; (8000eb8 <main+0x2d4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000cee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000cf2:	2121      	movs	r1, #33	; 0x21
 8000cf4:	5499      	strb	r1, [r3, r2]
					idx++;
 8000cf6:	4b70      	ldr	r3, [pc, #448]	; (8000eb8 <main+0x2d4>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <main+0x2d4>)
 8000d00:	701a      	strb	r2, [r3, #0]
					flag=0;
 8000d02:	4b6e      	ldr	r3, [pc, #440]	; (8000ebc <main+0x2d8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e0d1      	b.n	8000eae <main+0x2ca>
				}
				else if(znak=='1' && flag==1 && buf[0]==','){
 8000d0a:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000d0e:	2b31      	cmp	r3, #49	; 0x31
 8000d10:	d11d      	bne.n	8000d4e <main+0x16a>
 8000d12:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <main+0x2d8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d119      	bne.n	8000d4e <main+0x16a>
 8000d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b2c      	cmp	r3, #44	; 0x2c
 8000d26:	d112      	bne.n	8000d4e <main+0x16a>
					buf[idx]='\0';
 8000d28:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <main+0x2d4>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d36:	2100      	movs	r1, #0
 8000d38:	5499      	strb	r1, [r3, r2]
					idx++;
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <main+0x2d4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <main+0x2d4>)
 8000d44:	701a      	strb	r2, [r3, #0]
					flag=0;
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <main+0x2d8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e0af      	b.n	8000eae <main+0x2ca>
				}
				else if(znak=='2' && flag==1 && buf[0]==','){
 8000d4e:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000d52:	2b32      	cmp	r3, #50	; 0x32
 8000d54:	d11d      	bne.n	8000d92 <main+0x1ae>
 8000d56:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <main+0x2d8>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d119      	bne.n	8000d92 <main+0x1ae>
 8000d5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b2c      	cmp	r3, #44	; 0x2c
 8000d6a:	d112      	bne.n	8000d92 <main+0x1ae>
					buf[idx]=',';
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <main+0x2d4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d7a:	212c      	movs	r1, #44	; 0x2c
 8000d7c:	5499      	strb	r1, [r3, r2]
					idx++;
 8000d7e:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <main+0x2d4>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b4c      	ldr	r3, [pc, #304]	; (8000eb8 <main+0x2d4>)
 8000d88:	701a      	strb	r2, [r3, #0]
					flag=0;
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <main+0x2d8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e08d      	b.n	8000eae <main+0x2ca>
				}
				else if(znak=='3' && flag==1 && buf[0]==','){
 8000d92:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000d96:	2b33      	cmp	r3, #51	; 0x33
 8000d98:	d11d      	bne.n	8000dd6 <main+0x1f2>
 8000d9a:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <main+0x2d8>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d119      	bne.n	8000dd6 <main+0x1f2>
 8000da2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000da6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b2c      	cmp	r3, #44	; 0x2c
 8000dae:	d112      	bne.n	8000dd6 <main+0x1f2>
					buf[idx]=';';
 8000db0:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <main+0x2d4>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000dba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000dbe:	213b      	movs	r1, #59	; 0x3b
 8000dc0:	5499      	strb	r1, [r3, r2]
					idx++;
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <main+0x2d4>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <main+0x2d4>)
 8000dcc:	701a      	strb	r2, [r3, #0]
					flag=0;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <main+0x2d8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	e06b      	b.n	8000eae <main+0x2ca>
				}
				else if (flag==1 && buf[0]==',') {
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <main+0x2d8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d124      	bne.n	8000e28 <main+0x244>
 8000dde:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000de2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b2c      	cmp	r3, #44	; 0x2c
 8000dea:	d11d      	bne.n	8000e28 <main+0x244>
					for (i = 0; i <= idx; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000df2:	e00c      	b.n	8000e0e <main+0x22a>
						buf[i] = 0;
 8000df4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000df8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000dfc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8000e00:	2100      	movs	r1, #0
 8000e02:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <= idx; i++) {
 8000e04:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <main+0x2d4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d9ec      	bls.n	8000df4 <main+0x210>
					}
					flag=0;
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <main+0x2d8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
					idx=0;
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <main+0x2d4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e042      	b.n	8000eae <main+0x2ca>
				}
				else if(znak==';' && buf[0]==',' && flag==0){
 8000e28:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8000e2c:	2b3b      	cmp	r3, #59	; 0x3b
 8000e2e:	d121      	bne.n	8000e74 <main+0x290>
 8000e30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b2c      	cmp	r3, #44	; 0x2c
 8000e3c:	d11a      	bne.n	8000e74 <main+0x290>
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <main+0x2d8>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <main+0x290>
					buf[idx] = znak;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <main+0x2d4>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e54:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 8000e58:	545a      	strb	r2, [r3, r1]
					flag = 0;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <main+0x2d8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
					USART_validateFrameHST(buf, idx+1);
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <main+0x2d4>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fd25 	bl	80008bc <USART_validateFrameHST>
 8000e72:	e01c      	b.n	8000eae <main+0x2ca>
				}
				else if (buf[0]==',' && flag==0){
 8000e74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b2c      	cmp	r3, #44	; 0x2c
 8000e80:	f47f aed2 	bne.w	8000c28 <main+0x44>
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <main+0x2d8>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f aecd 	bne.w	8000c28 <main+0x44>
					buf[idx] = znak;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <main+0x2d4>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e9c:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 8000ea0:	545a      	strb	r2, [r3, r1]
					idx++;
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <main+0x2d4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <main+0x2d4>)
 8000eac:	701a      	strb	r2, [r3, #0]
    	    if (USART_kbhit()) {
 8000eae:	e6bb      	b.n	8000c28 <main+0x44>
 8000eb0:	20000cb0 	.word	0x20000cb0
 8000eb4:	20000080 	.word	0x20000080
 8000eb8:	20000df4 	.word	0x20000df4
 8000ebc:	20000df5 	.word	0x20000df5

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	; 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fb2c 	bl	800352c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <SystemClock_Config+0xd0>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <SystemClock_Config+0xd0>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef4:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <SystemClock_Config+0xd0>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <SystemClock_Config+0xd4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <SystemClock_Config+0xd4>)
 8000f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <SystemClock_Config+0xd4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f20:	2302      	movs	r3, #2
 8000f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f34:	2310      	movs	r3, #16
 8000f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f42:	2307      	movs	r3, #7
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fdf4 	bl	8001b38 <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f56:	f000 f8cb 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2102      	movs	r1, #2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 f856 	bl	8002028 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f82:	f000 f8b5 	bl	80010f0 <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3750      	adds	r7, #80	; 0x50
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_CRC_Init+0x20>)
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <MX_CRC_Init+0x24>)
 8000fa0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_CRC_Init+0x20>)
 8000fa4:	f000 fb7b 	bl	800169e <HAL_CRC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000fae:	f000 f89f 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000078 	.word	0x20000078
 8000fbc:	40023000 	.word	0x40023000

08000fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_USART2_UART_Init+0x50>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000ff8:	f001 fa36 	bl	8002468 <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001002:	f000 f875 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000080 	.word	0x20000080
 8001010:	40004400 	.word	0x40004400

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a2c      	ldr	r2, [pc, #176]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <MX_GPIO_Init+0xd0>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2120      	movs	r1, #32
 800109e:	4812      	ldr	r0, [pc, #72]	; (80010e8 <MX_GPIO_Init+0xd4>)
 80010a0:	f000 fd30 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480c      	ldr	r0, [pc, #48]	; (80010ec <MX_GPIO_Init+0xd8>)
 80010bc:	f000 fb9e 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c0:	2320      	movs	r3, #32
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_GPIO_Init+0xd4>)
 80010d8:	f000 fb90 	bl	80017fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020800 	.word	0x40020800

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    while (1) {
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x4>
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_MspInit+0x5c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <HAL_MspInit+0x5c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_MspInit+0x5c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_MspInit+0x5c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_MspInit+0x5c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_MspInit+0x5c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001136:	2007      	movs	r0, #7
 8001138:	f000 fa70 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2005      	movs	r0, #5
 8001142:	f000 fa76 	bl	8001632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001146:	2005      	movs	r0, #5
 8001148:	f000 fa8f 	bl	800166a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_CRC_MspInit+0x3c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10d      	bne.n	8001186 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_CRC_MspInit+0x40>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_CRC_MspInit+0x40>)
 8001174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_CRC_MspInit+0x40>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023000 	.word	0x40023000
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_UART_MspInit+0x94>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d133      	bne.n	8001226 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_UART_MspInit+0x98>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <HAL_UART_MspInit+0x9c>)
 8001212:	f000 faf3 	bl	80017fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2026      	movs	r0, #38	; 0x26
 800121c:	f000 fa09 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001220:	2026      	movs	r0, #38	; 0x26
 8001222:	f000 fa22 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f8d8 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <USART2_IRQHandler+0x10>)
 80012a6:	f001 f9a1 	bl	80025ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000080 	.word	0x20000080

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f002 f952 	bl	800358c <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	220c      	movs	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20018000 	.word	0x20018000
 8001314:	00000400 	.word	0x00000400
 8001318:	20000df8 	.word	0x20000df8
 800131c:	20000f48 	.word	0x20000f48

08001320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800134a:	490e      	ldr	r1, [pc, #56]	; (8001384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001360:	4c0b      	ldr	r4, [pc, #44]	; (8001390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800136e:	f7ff ffd7 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 f911 	bl	8003598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fc35 	bl	8000be4 <main>
  bx  lr    
 800137a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800137c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001388:	080041d4 	.word	0x080041d4
  ldr r2, =_sbss
 800138c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001390:	20000f48 	.word	0x20000f48

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <HAL_Init+0x40>)
 80013a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_Init+0x40>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x40>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f92b 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fe94 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f943 	bl	8001686 <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 f90b 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000000 	.word	0x20000000
 8001434:	20000008 	.word	0x20000008
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	20000dfc 	.word	0x20000dfc

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000dfc 	.word	0x20000dfc

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff8e 	bl	800151c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff29 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff3e 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff8e 	bl	8001570 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5d 	bl	800151c <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff31 	bl	80014e0 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00e      	b.n	80016ce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fd49 	bl	8001158 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff febe 	bl	8001464 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d008      	beq.n	8001708 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e052      	b.n	80017ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0216 	bic.w	r2, r2, #22
 8001716:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001726:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <HAL_DMA_Abort+0x62>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0208 	bic.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001758:	e013      	b.n	8001782 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800175a:	f7ff fe83 	bl	8001464 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b05      	cmp	r3, #5
 8001766:	d90c      	bls.n	8001782 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2220      	movs	r2, #32
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e015      	b.n	80017ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e4      	bne.n	800175a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	223f      	movs	r2, #63	; 0x3f
 8001796:	409a      	lsls	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d004      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e00c      	b.n	80017ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2205      	movs	r2, #5
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e159      	b.n	8001acc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8148 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a2 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_GPIO_Init+0x2e8>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x2ec>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a49      	ldr	r2, [pc, #292]	; (8001aec <HAL_GPIO_Init+0x2f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0x202>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2f4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x1fe>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_GPIO_Init+0x2f8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x1fa>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_GPIO_Init+0x2fc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x1f6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_GPIO_Init+0x300>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x1f2>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019ee:	2307      	movs	r3, #7
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x204>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x2ec>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a2f      	ldr	r2, [pc, #188]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f aea2 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40013c00 	.word	0x40013c00

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b20:	e003      	b.n	8001b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	619a      	str	r2, [r3, #24]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e267      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d075      	beq.n	8001c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b56:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d00c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d112      	bne.n	8001b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b7a:	d10b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	4b7e      	ldr	r3, [pc, #504]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d05b      	beq.n	8001c40 <HAL_RCC_OscConfig+0x108>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d157      	bne.n	8001c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e242      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d106      	bne.n	8001bac <HAL_RCC_OscConfig+0x74>
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01d      	b.n	8001be8 <HAL_RCC_OscConfig+0xb0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x98>
 8001bb6:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6f      	ldr	r2, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6c      	ldr	r2, [pc, #432]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xb0>
 8001bd0:	4b69      	ldr	r3, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a68      	ldr	r2, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a65      	ldr	r2, [pc, #404]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fc38 	bl	8001464 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fc34 	bl	8001464 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e207      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xc0>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fc24 	bl	8001464 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fc20 	bl	8001464 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1f3      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0xe8>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d11c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d116      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x152>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1c7      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	e03a      	b.n	8001d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_RCC_OscConfig+0x244>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff fbd9 	bl	8001464 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fbd5 	bl	8001464 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e1a8      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4925      	ldr	r1, [pc, #148]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
 8001ce8:	e015      	b.n	8001d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x244>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fbb8 	bl	8001464 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fbb4 	bl	8001464 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e187      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d036      	beq.n	8001d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d016      	beq.n	8001d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCC_OscConfig+0x248>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff fb98 	bl	8001464 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fb94 	bl	8001464 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e167      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x200>
 8001d56:	e01b      	b.n	8001d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_OscConfig+0x248>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fb81 	bl	8001464 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d64:	e00e      	b.n	8001d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d66:	f7ff fb7d 	bl	8001464 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d907      	bls.n	8001d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e150      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	42470000 	.word	0x42470000
 8001d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ea      	bne.n	8001d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8097 	beq.w	8001ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b7d      	ldr	r3, [pc, #500]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a7c      	ldr	r2, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b7a      	ldr	r3, [pc, #488]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b77      	ldr	r3, [pc, #476]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dda:	4b74      	ldr	r3, [pc, #464]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a73      	ldr	r2, [pc, #460]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fb3d 	bl	8001464 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7ff fb39 	bl	8001464 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e10c      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x474>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2ea>
 8001e14:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a63      	ldr	r2, [pc, #396]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e20:	e01c      	b.n	8001e5c <HAL_RCC_OscConfig+0x324>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x30c>
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a5e      	ldr	r2, [pc, #376]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a5b      	ldr	r2, [pc, #364]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0x324>
 8001e44:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e50:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d015      	beq.n	8001e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7ff fafe 	bl	8001464 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fafa 	bl	8001464 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0cb      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0ee      	beq.n	8001e6c <HAL_RCC_OscConfig+0x334>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fae8 	bl	8001464 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff fae4 	bl	8001464 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0b5      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ee      	bne.n	8001e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	4a38      	ldr	r2, [pc, #224]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a1 	beq.w	8002018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d05c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d141      	bne.n	8001f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_OscConfig+0x478>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fab8 	bl	8001464 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fab4 	bl	8001464 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e087      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	019b      	lsls	r3, r3, #6
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	491b      	ldr	r1, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x478>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff fa8d 	bl	8001464 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fa89 	bl	8001464 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e05c      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x416>
 8001f6c:	e054      	b.n	8002018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_RCC_OscConfig+0x478>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fa76 	bl	8001464 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff fa72 	bl	8001464 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e045      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x470>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x444>
 8001f9a:	e03d      	b.n	8002018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e038      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x4ec>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d028      	beq.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d121      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d11a      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d107      	bne.n	8002014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0cc      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d90c      	bls.n	8002064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800209e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d044      	beq.n	8002148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d119      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e067      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4934      	ldr	r1, [pc, #208]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7ff f9a4 	bl	8001464 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7ff f9a0 	bl	8001464 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e04f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d20c      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f821 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f904 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	08004078 	.word	0x08004078
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f8:	b094      	sub	sp, #80	; 0x50
 80021fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002200:	2300      	movs	r3, #0
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002204:	2300      	movs	r3, #0
 8002206:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220c:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d00d      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x40>
 8002218:	2b08      	cmp	r3, #8
 800221a:	f200 80e1 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x34>
 8002222:	2b04      	cmp	r3, #4
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x3a>
 8002226:	e0db      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b73      	ldr	r3, [pc, #460]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800222c:	e0db      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800222e:	4b73      	ldr	r3, [pc, #460]	; (80023fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002232:	e0d8      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002234:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800223c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d063      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224a:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	2200      	movs	r2, #0
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
 8002254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
 8002262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002266:	4622      	mov	r2, r4
 8002268:	462b      	mov	r3, r5
 800226a:	f04f 0000 	mov.w	r0, #0
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	0159      	lsls	r1, r3, #5
 8002274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002278:	0150      	lsls	r0, r2, #5
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4621      	mov	r1, r4
 8002280:	1a51      	subs	r1, r2, r1
 8002282:	6139      	str	r1, [r7, #16]
 8002284:	4629      	mov	r1, r5
 8002286:	eb63 0301 	sbc.w	r3, r3, r1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002298:	4659      	mov	r1, fp
 800229a:	018b      	lsls	r3, r1, #6
 800229c:	4651      	mov	r1, sl
 800229e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022a2:	4651      	mov	r1, sl
 80022a4:	018a      	lsls	r2, r1, #6
 80022a6:	4651      	mov	r1, sl
 80022a8:	ebb2 0801 	subs.w	r8, r2, r1
 80022ac:	4659      	mov	r1, fp
 80022ae:	eb63 0901 	sbc.w	r9, r3, r1
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022c6:	4690      	mov	r8, r2
 80022c8:	4699      	mov	r9, r3
 80022ca:	4623      	mov	r3, r4
 80022cc:	eb18 0303 	adds.w	r3, r8, r3
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	462b      	mov	r3, r5
 80022d4:	eb49 0303 	adc.w	r3, r9, r3
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022e6:	4629      	mov	r1, r5
 80022e8:	024b      	lsls	r3, r1, #9
 80022ea:	4621      	mov	r1, r4
 80022ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022f0:	4621      	mov	r1, r4
 80022f2:	024a      	lsls	r2, r1, #9
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fa:	2200      	movs	r2, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002304:	f7fd ffc4 	bl	8000290 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002310:	e058      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	2200      	movs	r2, #0
 800231a:	4618      	mov	r0, r3
 800231c:	4611      	mov	r1, r2
 800231e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800232c:	4642      	mov	r2, r8
 800232e:	464b      	mov	r3, r9
 8002330:	f04f 0000 	mov.w	r0, #0
 8002334:	f04f 0100 	mov.w	r1, #0
 8002338:	0159      	lsls	r1, r3, #5
 800233a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800233e:	0150      	lsls	r0, r2, #5
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4641      	mov	r1, r8
 8002346:	ebb2 0a01 	subs.w	sl, r2, r1
 800234a:	4649      	mov	r1, r9
 800234c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800235c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002364:	ebb2 040a 	subs.w	r4, r2, sl
 8002368:	eb63 050b 	sbc.w	r5, r3, fp
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	00eb      	lsls	r3, r5, #3
 8002376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237a:	00e2      	lsls	r2, r4, #3
 800237c:	4614      	mov	r4, r2
 800237e:	461d      	mov	r5, r3
 8002380:	4643      	mov	r3, r8
 8002382:	18e3      	adds	r3, r4, r3
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	464b      	mov	r3, r9
 8002388:	eb45 0303 	adc.w	r3, r5, r3
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239a:	4629      	mov	r1, r5
 800239c:	028b      	lsls	r3, r1, #10
 800239e:	4621      	mov	r1, r4
 80023a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a4:	4621      	mov	r1, r4
 80023a6:	028a      	lsls	r2, r1, #10
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ae:	2200      	movs	r2, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	61fa      	str	r2, [r7, #28]
 80023b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b8:	f7fd ff6a 	bl	8000290 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4613      	mov	r3, r2
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3750      	adds	r7, #80	; 0x50
 80023ec:	46bd      	mov	sp, r7
 80023ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCC_GetHCLKFreq+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff0 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	08004088 	.word	0x08004088

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffdc 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08004088 	.word	0x08004088

08002468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e03f      	b.n	80024fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fe84 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fd19 	bl	8002ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	4613      	mov	r3, r2
 800250e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b20      	cmp	r3, #32
 800251a:	d130      	bne.n	800257e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_UART_Transmit_IT+0x26>
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e029      	b.n	8002580 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_UART_Transmit_IT+0x38>
 8002536:	2302      	movs	r3, #2
 8002538:	e022      	b.n	8002580 <HAL_UART_Transmit_IT+0x7e>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	88fa      	ldrh	r2, [r7, #6]
 800254c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	88fa      	ldrh	r2, [r7, #6]
 8002552:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	; 0x21
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002578:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d11d      	bne.n	80025e2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_UART_Receive_IT+0x26>
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e016      	b.n	80025e4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_UART_Receive_IT+0x38>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e00f      	b.n	80025e4 <HAL_UART_Receive_IT+0x58>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	461a      	mov	r2, r3
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 faab 	bl	8002b34 <UART_Start_Receive_IT>
 80025de:	4603      	mov	r3, r0
 80025e0:	e000      	b.n	80025e4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0ba      	sub	sp, #232	; 0xe8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800261e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800262a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_UART_IRQHandler+0x66>
 800263e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fb8f 	bl	8002d6e <UART_Receive_IT>
      return;
 8002650:	e256      	b.n	8002b00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80de 	beq.w	8002818 <HAL_UART_IRQHandler+0x22c>
 800265c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80d1 	beq.w	8002818 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_UART_IRQHandler+0xae>
 8002682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_UART_IRQHandler+0xd2>
 80026a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_UART_IRQHandler+0xf6>
 80026ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_UART_IRQHandler+0x126>
 80026ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0208 	orr.w	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 81ed 	beq.w	8002af6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800271c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_UART_IRQHandler+0x14e>
 8002728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fb1a 	bl	8002d6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_UART_IRQHandler+0x17a>
 800275e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04f      	beq.n	8002806 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa22 	bl	8002bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d141      	bne.n	80027fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3314      	adds	r3, #20
 80027a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027b6:	e841 2300 	strex	r3, r2, [r1]
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1d9      	bne.n	800277a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d013      	beq.n	80027f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	4a7d      	ldr	r2, [pc, #500]	; (80029c8 <HAL_UART_IRQHandler+0x3dc>)
 80027d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe ffeb 	bl	80017b6 <HAL_DMA_Abort_IT>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027f0:	4610      	mov	r0, r2
 80027f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f4:	e00e      	b.n	8002814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f986 	bl	8002b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fc:	e00a      	b.n	8002814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f982 	bl	8002b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	e006      	b.n	8002814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f97e 	bl	8002b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002812:	e170      	b.n	8002af6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	bf00      	nop
    return;
 8002816:	e16e      	b.n	8002af6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 814a 	bne.w	8002ab6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8143 	beq.w	8002ab6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 813c 	beq.w	8002ab6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b40      	cmp	r3, #64	; 0x40
 8002860:	f040 80b4 	bne.w	80029cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002870:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8140 	beq.w	8002afa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800287e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002882:	429a      	cmp	r2, r3
 8002884:	f080 8139 	bcs.w	8002afa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800288e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289a:	f000 8088 	beq.w	80029ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1d9      	bne.n	800289e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f4:	e853 3f00 	ldrex	r3, [r3]
 80028f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3314      	adds	r3, #20
 800290a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800290e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002912:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002916:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e1      	bne.n	80028ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3314      	adds	r3, #20
 8002946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800294a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800294c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002950:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002952:	e841 2300 	strex	r3, r2, [r1]
 8002956:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1e3      	bne.n	8002926 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002976:	e853 3f00 	ldrex	r3, [r3]
 800297a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	f023 0310 	bic.w	r3, r3, #16
 8002982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002990:	65ba      	str	r2, [r7, #88]	; 0x58
 8002992:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800299e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e3      	bne.n	800296c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fe94 	bl	80016d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8ac 	bl	8002b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029c4:	e099      	b.n	8002afa <HAL_UART_IRQHandler+0x50e>
 80029c6:	bf00      	nop
 80029c8:	08002c77 	.word	0x08002c77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 808b 	beq.w	8002afe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8086 	beq.w	8002afe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	330c      	adds	r3, #12
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a16:	647a      	str	r2, [r7, #68]	; 0x44
 8002a18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e3      	bne.n	80029f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	623b      	str	r3, [r7, #32]
   return(result);
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a4e:	633a      	str	r2, [r7, #48]	; 0x30
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a56:	e841 2300 	strex	r3, r2, [r1]
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e3      	bne.n	8002a2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0310 	bic.w	r3, r3, #16
 8002a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330c      	adds	r3, #12
 8002a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a94:	61fa      	str	r2, [r7, #28]
 8002a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a98:	69b9      	ldr	r1, [r7, #24]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	e841 2300 	strex	r3, r2, [r1]
 8002aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e3      	bne.n	8002a70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f834 	bl	8002b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ab4:	e023      	b.n	8002afe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x4ea>
 8002ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8e5 	bl	8002c9e <UART_Transmit_IT>
    return;
 8002ad4:	e014      	b.n	8002b00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00e      	beq.n	8002b00 <HAL_UART_IRQHandler+0x514>
 8002ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f925 	bl	8002d3e <UART_EndTransmit_IT>
    return;
 8002af4:	e004      	b.n	8002b00 <HAL_UART_IRQHandler+0x514>
    return;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <HAL_UART_IRQHandler+0x514>
      return;
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <HAL_UART_IRQHandler+0x514>
      return;
 8002afe:	bf00      	nop
  }
}
 8002b00:	37e8      	adds	r7, #232	; 0xe8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop

08002b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	88fa      	ldrh	r2, [r7, #6]
 8002b52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2222      	movs	r2, #34	; 0x22
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b095      	sub	sp, #84	; 0x54
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc2:	e853 3f00 	ldrex	r3, [r3]
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd8:	643a      	str	r2, [r7, #64]	; 0x40
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002be0:	e841 2300 	strex	r3, r2, [r1]
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e5      	bne.n	8002bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3314      	adds	r3, #20
 8002bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	e853 3f00 	ldrex	r3, [r3]
 8002bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e5      	bne.n	8002bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d119      	bne.n	8002c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	e853 3f00 	ldrex	r3, [r3]
 8002c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 0310 	bic.w	r3, r3, #16
 8002c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c48:	61ba      	str	r2, [r7, #24]
 8002c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4c:	6979      	ldr	r1, [r7, #20]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	e841 2300 	strex	r3, r2, [r1]
 8002c54:	613b      	str	r3, [r7, #16]
   return(result);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e5      	bne.n	8002c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c6a:	bf00      	nop
 8002c6c:	3754      	adds	r7, #84	; 0x54
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff ff39 	bl	8002b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b21      	cmp	r3, #33	; 0x21
 8002cb0:	d13e      	bne.n	8002d30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	d114      	bne.n	8002ce6 <UART_Transmit_IT+0x48>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d110      	bne.n	8002ce6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	1c9a      	adds	r2, r3, #2
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	621a      	str	r2, [r3, #32]
 8002ce4:	e008      	b.n	8002cf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	1c59      	adds	r1, r3, #1
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6211      	str	r1, [r2, #32]
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4619      	mov	r1, r3
 8002d06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10f      	bne.n	8002d2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fee4 	bl	8000b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b08c      	sub	sp, #48	; 0x30
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b22      	cmp	r3, #34	; 0x22
 8002d80:	f040 80ab 	bne.w	8002eda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d117      	bne.n	8002dbe <UART_Receive_IT+0x50>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	1c9a      	adds	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
 8002dbc:	e026      	b.n	8002e0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd0:	d007      	beq.n	8002de2 <UART_Receive_IT+0x74>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <UART_Receive_IT+0x82>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e008      	b.n	8002e02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d15a      	bne.n	8002ed6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0220 	bic.w	r2, r2, #32
 8002e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d135      	bne.n	8002ecc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	613b      	str	r3, [r7, #16]
   return(result);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f023 0310 	bic.w	r3, r3, #16
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	623a      	str	r2, [r7, #32]
 8002e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	69f9      	ldr	r1, [r7, #28]
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e5      	bne.n	8002e66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d10a      	bne.n	8002ebe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fe29 	bl	8002b1c <HAL_UARTEx_RxEventCallback>
 8002eca:	e002      	b.n	8002ed2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fd fe61 	bl	8000b94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e002      	b.n	8002edc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e000      	b.n	8002edc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3730      	adds	r7, #48	; 0x30
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b0c0      	sub	sp, #256	; 0x100
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	ea40 0301 	orr.w	r3, r0, r1
 8002f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f3c:	f021 010c 	bic.w	r1, r1, #12
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	6999      	ldr	r1, [r3, #24]
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	ea40 0301 	orr.w	r3, r0, r1
 8002f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <UART_SetConfig+0x2cc>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0xa0>
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	; (80031b4 <UART_SetConfig+0x2d0>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff fa5c 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8002f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f8c:	e003      	b.n	8002f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8e:	f7ff fa43 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8002f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa0:	f040 810c 	bne.w	80031bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	eb12 0801 	adds.w	r8, r2, r1
 8002fcc:	4629      	mov	r1, r5
 8002fce:	eb43 0901 	adc.w	r9, r3, r1
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	eb18 0303 	adds.w	r3, r8, r3
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800300e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003012:	460b      	mov	r3, r1
 8003014:	18db      	adds	r3, r3, r3
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
 8003018:	4613      	mov	r3, r2
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	657b      	str	r3, [r7, #84]	; 0x54
 8003020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003028:	f7fd f932 	bl	8000290 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011c      	lsls	r4, r3, #4
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	64b9      	str	r1, [r7, #72]	; 0x48
 8003054:	415b      	adcs	r3, r3
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800305c:	4641      	mov	r1, r8
 800305e:	eb12 0a01 	adds.w	sl, r2, r1
 8003062:	4649      	mov	r1, r9
 8003064:	eb43 0b01 	adc.w	fp, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307c:	4692      	mov	sl, r2
 800307e:	469b      	mov	fp, r3
 8003080:	4643      	mov	r3, r8
 8003082:	eb1a 0303 	adds.w	r3, sl, r3
 8003086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308a:	464b      	mov	r3, r9
 800308c:	eb4b 0303 	adc.w	r3, fp, r3
 8003090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030be:	f7fd f8e7 	bl	8000290 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2301 	umull	r2, r3, r3, r1
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2264      	movs	r2, #100	; 0x64
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	1acb      	subs	r3, r1, r3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 2302 	umull	r2, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	63b9      	str	r1, [r7, #56]	; 0x38
 8003108:	415b      	adcs	r3, r3
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6339      	str	r1, [r7, #48]	; 0x30
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800315c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003164:	460b      	mov	r3, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 800316a:	4613      	mov	r3, r2
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317a:	f7fd f889 	bl	8000290 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	3332      	adds	r3, #50	; 0x32
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4422      	add	r2, r4
 80031aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ac:	e106      	b.n	80033bc <UART_SetConfig+0x4d8>
 80031ae:	bf00      	nop
 80031b0:	40011000 	.word	0x40011000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	6239      	str	r1, [r7, #32]
 80031d6:	415b      	adcs	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031de:	4641      	mov	r1, r8
 80031e0:	1854      	adds	r4, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0501 	adc.w	r5, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	00eb      	lsls	r3, r5, #3
 80031f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	18e3      	adds	r3, r4, r3
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003204:	464b      	mov	r3, r9
 8003206:	eb45 0303 	adc.w	r3, r5, r3
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322a:	4629      	mov	r1, r5
 800322c:	008b      	lsls	r3, r1, #2
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003234:	4621      	mov	r1, r4
 8003236:	008a      	lsls	r2, r1, #2
 8003238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800323c:	f7fd f828 	bl	8000290 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003246:	fba3 2302 	umull	r2, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800325c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	61b9      	str	r1, [r7, #24]
 8003268:	415b      	adcs	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6139      	str	r1, [r7, #16]
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032c8:	4649      	mov	r1, r9
 80032ca:	008b      	lsls	r3, r1, #2
 80032cc:	4641      	mov	r1, r8
 80032ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d2:	4641      	mov	r1, r8
 80032d4:	008a      	lsls	r2, r1, #2
 80032d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032da:	f7fc ffd9 	bl	8000290 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	; 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	; 0x32
 80032f8:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	673b      	str	r3, [r7, #112]	; 0x70
 800330e:	677a      	str	r2, [r7, #116]	; 0x74
 8003310:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	415b      	adcs	r3, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	66bb      	str	r3, [r7, #104]	; 0x68
 8003356:	464b      	mov	r3, r9
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
 800336a:	667a      	str	r2, [r7, #100]	; 0x64
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338a:	f7fc ff81 	bl	8000290 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <UART_SetConfig+0x4e4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <atoi>:
 80033cc:	220a      	movs	r2, #10
 80033ce:	2100      	movs	r1, #0
 80033d0:	f000 b882 	b.w	80034d8 <strtol>

080033d4 <_strtol_l.constprop.0>:
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033da:	d001      	beq.n	80033e0 <_strtol_l.constprop.0+0xc>
 80033dc:	2b24      	cmp	r3, #36	; 0x24
 80033de:	d906      	bls.n	80033ee <_strtol_l.constprop.0+0x1a>
 80033e0:	f000 f8d4 	bl	800358c <__errno>
 80033e4:	2316      	movs	r3, #22
 80033e6:	6003      	str	r3, [r0, #0]
 80033e8:	2000      	movs	r0, #0
 80033ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80034d4 <_strtol_l.constprop.0+0x100>
 80033f2:	460d      	mov	r5, r1
 80033f4:	462e      	mov	r6, r5
 80033f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80033fe:	f017 0708 	ands.w	r7, r7, #8
 8003402:	d1f7      	bne.n	80033f4 <_strtol_l.constprop.0+0x20>
 8003404:	2c2d      	cmp	r4, #45	; 0x2d
 8003406:	d132      	bne.n	800346e <_strtol_l.constprop.0+0x9a>
 8003408:	782c      	ldrb	r4, [r5, #0]
 800340a:	2701      	movs	r7, #1
 800340c:	1cb5      	adds	r5, r6, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d05b      	beq.n	80034ca <_strtol_l.constprop.0+0xf6>
 8003412:	2b10      	cmp	r3, #16
 8003414:	d109      	bne.n	800342a <_strtol_l.constprop.0+0x56>
 8003416:	2c30      	cmp	r4, #48	; 0x30
 8003418:	d107      	bne.n	800342a <_strtol_l.constprop.0+0x56>
 800341a:	782c      	ldrb	r4, [r5, #0]
 800341c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003420:	2c58      	cmp	r4, #88	; 0x58
 8003422:	d14d      	bne.n	80034c0 <_strtol_l.constprop.0+0xec>
 8003424:	786c      	ldrb	r4, [r5, #1]
 8003426:	2310      	movs	r3, #16
 8003428:	3502      	adds	r5, #2
 800342a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800342e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003432:	f04f 0e00 	mov.w	lr, #0
 8003436:	fbb8 f9f3 	udiv	r9, r8, r3
 800343a:	4676      	mov	r6, lr
 800343c:	fb03 8a19 	mls	sl, r3, r9, r8
 8003440:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003444:	f1bc 0f09 	cmp.w	ip, #9
 8003448:	d816      	bhi.n	8003478 <_strtol_l.constprop.0+0xa4>
 800344a:	4664      	mov	r4, ip
 800344c:	42a3      	cmp	r3, r4
 800344e:	dd24      	ble.n	800349a <_strtol_l.constprop.0+0xc6>
 8003450:	f1be 3fff 	cmp.w	lr, #4294967295
 8003454:	d008      	beq.n	8003468 <_strtol_l.constprop.0+0x94>
 8003456:	45b1      	cmp	r9, r6
 8003458:	d31c      	bcc.n	8003494 <_strtol_l.constprop.0+0xc0>
 800345a:	d101      	bne.n	8003460 <_strtol_l.constprop.0+0x8c>
 800345c:	45a2      	cmp	sl, r4
 800345e:	db19      	blt.n	8003494 <_strtol_l.constprop.0+0xc0>
 8003460:	fb06 4603 	mla	r6, r6, r3, r4
 8003464:	f04f 0e01 	mov.w	lr, #1
 8003468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800346c:	e7e8      	b.n	8003440 <_strtol_l.constprop.0+0x6c>
 800346e:	2c2b      	cmp	r4, #43	; 0x2b
 8003470:	bf04      	itt	eq
 8003472:	782c      	ldrbeq	r4, [r5, #0]
 8003474:	1cb5      	addeq	r5, r6, #2
 8003476:	e7ca      	b.n	800340e <_strtol_l.constprop.0+0x3a>
 8003478:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800347c:	f1bc 0f19 	cmp.w	ip, #25
 8003480:	d801      	bhi.n	8003486 <_strtol_l.constprop.0+0xb2>
 8003482:	3c37      	subs	r4, #55	; 0x37
 8003484:	e7e2      	b.n	800344c <_strtol_l.constprop.0+0x78>
 8003486:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800348a:	f1bc 0f19 	cmp.w	ip, #25
 800348e:	d804      	bhi.n	800349a <_strtol_l.constprop.0+0xc6>
 8003490:	3c57      	subs	r4, #87	; 0x57
 8003492:	e7db      	b.n	800344c <_strtol_l.constprop.0+0x78>
 8003494:	f04f 3eff 	mov.w	lr, #4294967295
 8003498:	e7e6      	b.n	8003468 <_strtol_l.constprop.0+0x94>
 800349a:	f1be 3fff 	cmp.w	lr, #4294967295
 800349e:	d105      	bne.n	80034ac <_strtol_l.constprop.0+0xd8>
 80034a0:	2322      	movs	r3, #34	; 0x22
 80034a2:	6003      	str	r3, [r0, #0]
 80034a4:	4646      	mov	r6, r8
 80034a6:	b942      	cbnz	r2, 80034ba <_strtol_l.constprop.0+0xe6>
 80034a8:	4630      	mov	r0, r6
 80034aa:	e79e      	b.n	80033ea <_strtol_l.constprop.0+0x16>
 80034ac:	b107      	cbz	r7, 80034b0 <_strtol_l.constprop.0+0xdc>
 80034ae:	4276      	negs	r6, r6
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	d0f9      	beq.n	80034a8 <_strtol_l.constprop.0+0xd4>
 80034b4:	f1be 0f00 	cmp.w	lr, #0
 80034b8:	d000      	beq.n	80034bc <_strtol_l.constprop.0+0xe8>
 80034ba:	1e69      	subs	r1, r5, #1
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	e7f3      	b.n	80034a8 <_strtol_l.constprop.0+0xd4>
 80034c0:	2430      	movs	r4, #48	; 0x30
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1b1      	bne.n	800342a <_strtol_l.constprop.0+0x56>
 80034c6:	2308      	movs	r3, #8
 80034c8:	e7af      	b.n	800342a <_strtol_l.constprop.0+0x56>
 80034ca:	2c30      	cmp	r4, #48	; 0x30
 80034cc:	d0a5      	beq.n	800341a <_strtol_l.constprop.0+0x46>
 80034ce:	230a      	movs	r3, #10
 80034d0:	e7ab      	b.n	800342a <_strtol_l.constprop.0+0x56>
 80034d2:	bf00      	nop
 80034d4:	08004091 	.word	0x08004091

080034d8 <strtol>:
 80034d8:	4613      	mov	r3, r2
 80034da:	460a      	mov	r2, r1
 80034dc:	4601      	mov	r1, r0
 80034de:	4802      	ldr	r0, [pc, #8]	; (80034e8 <strtol+0x10>)
 80034e0:	6800      	ldr	r0, [r0, #0]
 80034e2:	f7ff bf77 	b.w	80033d4 <_strtol_l.constprop.0>
 80034e6:	bf00      	nop
 80034e8:	20000058 	.word	0x20000058

080034ec <_vsiprintf_r>:
 80034ec:	b500      	push	{lr}
 80034ee:	b09b      	sub	sp, #108	; 0x6c
 80034f0:	9100      	str	r1, [sp, #0]
 80034f2:	9104      	str	r1, [sp, #16]
 80034f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034f8:	9105      	str	r1, [sp, #20]
 80034fa:	9102      	str	r1, [sp, #8]
 80034fc:	4905      	ldr	r1, [pc, #20]	; (8003514 <_vsiprintf_r+0x28>)
 80034fe:	9103      	str	r1, [sp, #12]
 8003500:	4669      	mov	r1, sp
 8003502:	f000 f9cf 	bl	80038a4 <_svfiprintf_r>
 8003506:	9b00      	ldr	r3, [sp, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	b01b      	add	sp, #108	; 0x6c
 800350e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003512:	bf00      	nop
 8003514:	ffff0208 	.word	0xffff0208

08003518 <vsiprintf>:
 8003518:	4613      	mov	r3, r2
 800351a:	460a      	mov	r2, r1
 800351c:	4601      	mov	r1, r0
 800351e:	4802      	ldr	r0, [pc, #8]	; (8003528 <vsiprintf+0x10>)
 8003520:	6800      	ldr	r0, [r0, #0]
 8003522:	f7ff bfe3 	b.w	80034ec <_vsiprintf_r>
 8003526:	bf00      	nop
 8003528:	20000058 	.word	0x20000058

0800352c <memset>:
 800352c:	4402      	add	r2, r0
 800352e:	4603      	mov	r3, r0
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <memset+0xa>
 8003534:	4770      	bx	lr
 8003536:	f803 1b01 	strb.w	r1, [r3], #1
 800353a:	e7f9      	b.n	8003530 <memset+0x4>

0800353c <strncmp>:
 800353c:	b510      	push	{r4, lr}
 800353e:	b16a      	cbz	r2, 800355c <strncmp+0x20>
 8003540:	3901      	subs	r1, #1
 8003542:	1884      	adds	r4, r0, r2
 8003544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003548:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800354c:	429a      	cmp	r2, r3
 800354e:	d103      	bne.n	8003558 <strncmp+0x1c>
 8003550:	42a0      	cmp	r0, r4
 8003552:	d001      	beq.n	8003558 <strncmp+0x1c>
 8003554:	2a00      	cmp	r2, #0
 8003556:	d1f5      	bne.n	8003544 <strncmp+0x8>
 8003558:	1ad0      	subs	r0, r2, r3
 800355a:	bd10      	pop	{r4, pc}
 800355c:	4610      	mov	r0, r2
 800355e:	e7fc      	b.n	800355a <strncmp+0x1e>

08003560 <strstr>:
 8003560:	780a      	ldrb	r2, [r1, #0]
 8003562:	b570      	push	{r4, r5, r6, lr}
 8003564:	b96a      	cbnz	r2, 8003582 <strstr+0x22>
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	429a      	cmp	r2, r3
 800356a:	d109      	bne.n	8003580 <strstr+0x20>
 800356c:	460c      	mov	r4, r1
 800356e:	4605      	mov	r5, r0
 8003570:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f6      	beq.n	8003566 <strstr+0x6>
 8003578:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800357c:	429e      	cmp	r6, r3
 800357e:	d0f7      	beq.n	8003570 <strstr+0x10>
 8003580:	3001      	adds	r0, #1
 8003582:	7803      	ldrb	r3, [r0, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ef      	bne.n	8003568 <strstr+0x8>
 8003588:	4618      	mov	r0, r3
 800358a:	e7ec      	b.n	8003566 <strstr+0x6>

0800358c <__errno>:
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <__errno+0x8>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000058 	.word	0x20000058

08003598 <__libc_init_array>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	4d0d      	ldr	r5, [pc, #52]	; (80035d0 <__libc_init_array+0x38>)
 800359c:	4c0d      	ldr	r4, [pc, #52]	; (80035d4 <__libc_init_array+0x3c>)
 800359e:	1b64      	subs	r4, r4, r5
 80035a0:	10a4      	asrs	r4, r4, #2
 80035a2:	2600      	movs	r6, #0
 80035a4:	42a6      	cmp	r6, r4
 80035a6:	d109      	bne.n	80035bc <__libc_init_array+0x24>
 80035a8:	4d0b      	ldr	r5, [pc, #44]	; (80035d8 <__libc_init_array+0x40>)
 80035aa:	4c0c      	ldr	r4, [pc, #48]	; (80035dc <__libc_init_array+0x44>)
 80035ac:	f000 fc6a 	bl	8003e84 <_init>
 80035b0:	1b64      	subs	r4, r4, r5
 80035b2:	10a4      	asrs	r4, r4, #2
 80035b4:	2600      	movs	r6, #0
 80035b6:	42a6      	cmp	r6, r4
 80035b8:	d105      	bne.n	80035c6 <__libc_init_array+0x2e>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c0:	4798      	blx	r3
 80035c2:	3601      	adds	r6, #1
 80035c4:	e7ee      	b.n	80035a4 <__libc_init_array+0xc>
 80035c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ca:	4798      	blx	r3
 80035cc:	3601      	adds	r6, #1
 80035ce:	e7f2      	b.n	80035b6 <__libc_init_array+0x1e>
 80035d0:	080041cc 	.word	0x080041cc
 80035d4:	080041cc 	.word	0x080041cc
 80035d8:	080041cc 	.word	0x080041cc
 80035dc:	080041d0 	.word	0x080041d0

080035e0 <__retarget_lock_acquire_recursive>:
 80035e0:	4770      	bx	lr

080035e2 <__retarget_lock_release_recursive>:
 80035e2:	4770      	bx	lr

080035e4 <memcpy>:
 80035e4:	440a      	add	r2, r1
 80035e6:	4291      	cmp	r1, r2
 80035e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80035ec:	d100      	bne.n	80035f0 <memcpy+0xc>
 80035ee:	4770      	bx	lr
 80035f0:	b510      	push	{r4, lr}
 80035f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035fa:	4291      	cmp	r1, r2
 80035fc:	d1f9      	bne.n	80035f2 <memcpy+0xe>
 80035fe:	bd10      	pop	{r4, pc}

08003600 <_free_r>:
 8003600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003602:	2900      	cmp	r1, #0
 8003604:	d044      	beq.n	8003690 <_free_r+0x90>
 8003606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800360a:	9001      	str	r0, [sp, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f1a1 0404 	sub.w	r4, r1, #4
 8003612:	bfb8      	it	lt
 8003614:	18e4      	addlt	r4, r4, r3
 8003616:	f000 f8df 	bl	80037d8 <__malloc_lock>
 800361a:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <_free_r+0x94>)
 800361c:	9801      	ldr	r0, [sp, #4]
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	b933      	cbnz	r3, 8003630 <_free_r+0x30>
 8003622:	6063      	str	r3, [r4, #4]
 8003624:	6014      	str	r4, [r2, #0]
 8003626:	b003      	add	sp, #12
 8003628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800362c:	f000 b8da 	b.w	80037e4 <__malloc_unlock>
 8003630:	42a3      	cmp	r3, r4
 8003632:	d908      	bls.n	8003646 <_free_r+0x46>
 8003634:	6825      	ldr	r5, [r4, #0]
 8003636:	1961      	adds	r1, r4, r5
 8003638:	428b      	cmp	r3, r1
 800363a:	bf01      	itttt	eq
 800363c:	6819      	ldreq	r1, [r3, #0]
 800363e:	685b      	ldreq	r3, [r3, #4]
 8003640:	1949      	addeq	r1, r1, r5
 8003642:	6021      	streq	r1, [r4, #0]
 8003644:	e7ed      	b.n	8003622 <_free_r+0x22>
 8003646:	461a      	mov	r2, r3
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	b10b      	cbz	r3, 8003650 <_free_r+0x50>
 800364c:	42a3      	cmp	r3, r4
 800364e:	d9fa      	bls.n	8003646 <_free_r+0x46>
 8003650:	6811      	ldr	r1, [r2, #0]
 8003652:	1855      	adds	r5, r2, r1
 8003654:	42a5      	cmp	r5, r4
 8003656:	d10b      	bne.n	8003670 <_free_r+0x70>
 8003658:	6824      	ldr	r4, [r4, #0]
 800365a:	4421      	add	r1, r4
 800365c:	1854      	adds	r4, r2, r1
 800365e:	42a3      	cmp	r3, r4
 8003660:	6011      	str	r1, [r2, #0]
 8003662:	d1e0      	bne.n	8003626 <_free_r+0x26>
 8003664:	681c      	ldr	r4, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	6053      	str	r3, [r2, #4]
 800366a:	440c      	add	r4, r1
 800366c:	6014      	str	r4, [r2, #0]
 800366e:	e7da      	b.n	8003626 <_free_r+0x26>
 8003670:	d902      	bls.n	8003678 <_free_r+0x78>
 8003672:	230c      	movs	r3, #12
 8003674:	6003      	str	r3, [r0, #0]
 8003676:	e7d6      	b.n	8003626 <_free_r+0x26>
 8003678:	6825      	ldr	r5, [r4, #0]
 800367a:	1961      	adds	r1, r4, r5
 800367c:	428b      	cmp	r3, r1
 800367e:	bf04      	itt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	6063      	str	r3, [r4, #4]
 8003686:	bf04      	itt	eq
 8003688:	1949      	addeq	r1, r1, r5
 800368a:	6021      	streq	r1, [r4, #0]
 800368c:	6054      	str	r4, [r2, #4]
 800368e:	e7ca      	b.n	8003626 <_free_r+0x26>
 8003690:	b003      	add	sp, #12
 8003692:	bd30      	pop	{r4, r5, pc}
 8003694:	20000f40 	.word	0x20000f40

08003698 <sbrk_aligned>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	4e0e      	ldr	r6, [pc, #56]	; (80036d4 <sbrk_aligned+0x3c>)
 800369c:	460c      	mov	r4, r1
 800369e:	6831      	ldr	r1, [r6, #0]
 80036a0:	4605      	mov	r5, r0
 80036a2:	b911      	cbnz	r1, 80036aa <sbrk_aligned+0x12>
 80036a4:	f000 fba6 	bl	8003df4 <_sbrk_r>
 80036a8:	6030      	str	r0, [r6, #0]
 80036aa:	4621      	mov	r1, r4
 80036ac:	4628      	mov	r0, r5
 80036ae:	f000 fba1 	bl	8003df4 <_sbrk_r>
 80036b2:	1c43      	adds	r3, r0, #1
 80036b4:	d00a      	beq.n	80036cc <sbrk_aligned+0x34>
 80036b6:	1cc4      	adds	r4, r0, #3
 80036b8:	f024 0403 	bic.w	r4, r4, #3
 80036bc:	42a0      	cmp	r0, r4
 80036be:	d007      	beq.n	80036d0 <sbrk_aligned+0x38>
 80036c0:	1a21      	subs	r1, r4, r0
 80036c2:	4628      	mov	r0, r5
 80036c4:	f000 fb96 	bl	8003df4 <_sbrk_r>
 80036c8:	3001      	adds	r0, #1
 80036ca:	d101      	bne.n	80036d0 <sbrk_aligned+0x38>
 80036cc:	f04f 34ff 	mov.w	r4, #4294967295
 80036d0:	4620      	mov	r0, r4
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	20000f44 	.word	0x20000f44

080036d8 <_malloc_r>:
 80036d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036dc:	1ccd      	adds	r5, r1, #3
 80036de:	f025 0503 	bic.w	r5, r5, #3
 80036e2:	3508      	adds	r5, #8
 80036e4:	2d0c      	cmp	r5, #12
 80036e6:	bf38      	it	cc
 80036e8:	250c      	movcc	r5, #12
 80036ea:	2d00      	cmp	r5, #0
 80036ec:	4607      	mov	r7, r0
 80036ee:	db01      	blt.n	80036f4 <_malloc_r+0x1c>
 80036f0:	42a9      	cmp	r1, r5
 80036f2:	d905      	bls.n	8003700 <_malloc_r+0x28>
 80036f4:	230c      	movs	r3, #12
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	2600      	movs	r6, #0
 80036fa:	4630      	mov	r0, r6
 80036fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003700:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037d4 <_malloc_r+0xfc>
 8003704:	f000 f868 	bl	80037d8 <__malloc_lock>
 8003708:	f8d8 3000 	ldr.w	r3, [r8]
 800370c:	461c      	mov	r4, r3
 800370e:	bb5c      	cbnz	r4, 8003768 <_malloc_r+0x90>
 8003710:	4629      	mov	r1, r5
 8003712:	4638      	mov	r0, r7
 8003714:	f7ff ffc0 	bl	8003698 <sbrk_aligned>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	4604      	mov	r4, r0
 800371c:	d155      	bne.n	80037ca <_malloc_r+0xf2>
 800371e:	f8d8 4000 	ldr.w	r4, [r8]
 8003722:	4626      	mov	r6, r4
 8003724:	2e00      	cmp	r6, #0
 8003726:	d145      	bne.n	80037b4 <_malloc_r+0xdc>
 8003728:	2c00      	cmp	r4, #0
 800372a:	d048      	beq.n	80037be <_malloc_r+0xe6>
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	4631      	mov	r1, r6
 8003730:	4638      	mov	r0, r7
 8003732:	eb04 0903 	add.w	r9, r4, r3
 8003736:	f000 fb5d 	bl	8003df4 <_sbrk_r>
 800373a:	4581      	cmp	r9, r0
 800373c:	d13f      	bne.n	80037be <_malloc_r+0xe6>
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	1a6d      	subs	r5, r5, r1
 8003742:	4629      	mov	r1, r5
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ffa7 	bl	8003698 <sbrk_aligned>
 800374a:	3001      	adds	r0, #1
 800374c:	d037      	beq.n	80037be <_malloc_r+0xe6>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	442b      	add	r3, r5
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	f8d8 3000 	ldr.w	r3, [r8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d038      	beq.n	80037ce <_malloc_r+0xf6>
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	42a2      	cmp	r2, r4
 8003760:	d12b      	bne.n	80037ba <_malloc_r+0xe2>
 8003762:	2200      	movs	r2, #0
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e00f      	b.n	8003788 <_malloc_r+0xb0>
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	1b52      	subs	r2, r2, r5
 800376c:	d41f      	bmi.n	80037ae <_malloc_r+0xd6>
 800376e:	2a0b      	cmp	r2, #11
 8003770:	d917      	bls.n	80037a2 <_malloc_r+0xca>
 8003772:	1961      	adds	r1, r4, r5
 8003774:	42a3      	cmp	r3, r4
 8003776:	6025      	str	r5, [r4, #0]
 8003778:	bf18      	it	ne
 800377a:	6059      	strne	r1, [r3, #4]
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	bf08      	it	eq
 8003780:	f8c8 1000 	streq.w	r1, [r8]
 8003784:	5162      	str	r2, [r4, r5]
 8003786:	604b      	str	r3, [r1, #4]
 8003788:	4638      	mov	r0, r7
 800378a:	f104 060b 	add.w	r6, r4, #11
 800378e:	f000 f829 	bl	80037e4 <__malloc_unlock>
 8003792:	f026 0607 	bic.w	r6, r6, #7
 8003796:	1d23      	adds	r3, r4, #4
 8003798:	1af2      	subs	r2, r6, r3
 800379a:	d0ae      	beq.n	80036fa <_malloc_r+0x22>
 800379c:	1b9b      	subs	r3, r3, r6
 800379e:	50a3      	str	r3, [r4, r2]
 80037a0:	e7ab      	b.n	80036fa <_malloc_r+0x22>
 80037a2:	42a3      	cmp	r3, r4
 80037a4:	6862      	ldr	r2, [r4, #4]
 80037a6:	d1dd      	bne.n	8003764 <_malloc_r+0x8c>
 80037a8:	f8c8 2000 	str.w	r2, [r8]
 80037ac:	e7ec      	b.n	8003788 <_malloc_r+0xb0>
 80037ae:	4623      	mov	r3, r4
 80037b0:	6864      	ldr	r4, [r4, #4]
 80037b2:	e7ac      	b.n	800370e <_malloc_r+0x36>
 80037b4:	4634      	mov	r4, r6
 80037b6:	6876      	ldr	r6, [r6, #4]
 80037b8:	e7b4      	b.n	8003724 <_malloc_r+0x4c>
 80037ba:	4613      	mov	r3, r2
 80037bc:	e7cc      	b.n	8003758 <_malloc_r+0x80>
 80037be:	230c      	movs	r3, #12
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4638      	mov	r0, r7
 80037c4:	f000 f80e 	bl	80037e4 <__malloc_unlock>
 80037c8:	e797      	b.n	80036fa <_malloc_r+0x22>
 80037ca:	6025      	str	r5, [r4, #0]
 80037cc:	e7dc      	b.n	8003788 <_malloc_r+0xb0>
 80037ce:	605b      	str	r3, [r3, #4]
 80037d0:	deff      	udf	#255	; 0xff
 80037d2:	bf00      	nop
 80037d4:	20000f40 	.word	0x20000f40

080037d8 <__malloc_lock>:
 80037d8:	4801      	ldr	r0, [pc, #4]	; (80037e0 <__malloc_lock+0x8>)
 80037da:	f7ff bf01 	b.w	80035e0 <__retarget_lock_acquire_recursive>
 80037de:	bf00      	nop
 80037e0:	20000f3c 	.word	0x20000f3c

080037e4 <__malloc_unlock>:
 80037e4:	4801      	ldr	r0, [pc, #4]	; (80037ec <__malloc_unlock+0x8>)
 80037e6:	f7ff befc 	b.w	80035e2 <__retarget_lock_release_recursive>
 80037ea:	bf00      	nop
 80037ec:	20000f3c 	.word	0x20000f3c

080037f0 <__ssputs_r>:
 80037f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f4:	688e      	ldr	r6, [r1, #8]
 80037f6:	461f      	mov	r7, r3
 80037f8:	42be      	cmp	r6, r7
 80037fa:	680b      	ldr	r3, [r1, #0]
 80037fc:	4682      	mov	sl, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	4690      	mov	r8, r2
 8003802:	d82c      	bhi.n	800385e <__ssputs_r+0x6e>
 8003804:	898a      	ldrh	r2, [r1, #12]
 8003806:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800380a:	d026      	beq.n	800385a <__ssputs_r+0x6a>
 800380c:	6965      	ldr	r5, [r4, #20]
 800380e:	6909      	ldr	r1, [r1, #16]
 8003810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003814:	eba3 0901 	sub.w	r9, r3, r1
 8003818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800381c:	1c7b      	adds	r3, r7, #1
 800381e:	444b      	add	r3, r9
 8003820:	106d      	asrs	r5, r5, #1
 8003822:	429d      	cmp	r5, r3
 8003824:	bf38      	it	cc
 8003826:	461d      	movcc	r5, r3
 8003828:	0553      	lsls	r3, r2, #21
 800382a:	d527      	bpl.n	800387c <__ssputs_r+0x8c>
 800382c:	4629      	mov	r1, r5
 800382e:	f7ff ff53 	bl	80036d8 <_malloc_r>
 8003832:	4606      	mov	r6, r0
 8003834:	b360      	cbz	r0, 8003890 <__ssputs_r+0xa0>
 8003836:	6921      	ldr	r1, [r4, #16]
 8003838:	464a      	mov	r2, r9
 800383a:	f7ff fed3 	bl	80035e4 <memcpy>
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	6126      	str	r6, [r4, #16]
 800384c:	6165      	str	r5, [r4, #20]
 800384e:	444e      	add	r6, r9
 8003850:	eba5 0509 	sub.w	r5, r5, r9
 8003854:	6026      	str	r6, [r4, #0]
 8003856:	60a5      	str	r5, [r4, #8]
 8003858:	463e      	mov	r6, r7
 800385a:	42be      	cmp	r6, r7
 800385c:	d900      	bls.n	8003860 <__ssputs_r+0x70>
 800385e:	463e      	mov	r6, r7
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	4632      	mov	r2, r6
 8003864:	4641      	mov	r1, r8
 8003866:	f000 faab 	bl	8003dc0 <memmove>
 800386a:	68a3      	ldr	r3, [r4, #8]
 800386c:	1b9b      	subs	r3, r3, r6
 800386e:	60a3      	str	r3, [r4, #8]
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	4433      	add	r3, r6
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	2000      	movs	r0, #0
 8003878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387c:	462a      	mov	r2, r5
 800387e:	f000 fac9 	bl	8003e14 <_realloc_r>
 8003882:	4606      	mov	r6, r0
 8003884:	2800      	cmp	r0, #0
 8003886:	d1e0      	bne.n	800384a <__ssputs_r+0x5a>
 8003888:	6921      	ldr	r1, [r4, #16]
 800388a:	4650      	mov	r0, sl
 800388c:	f7ff feb8 	bl	8003600 <_free_r>
 8003890:	230c      	movs	r3, #12
 8003892:	f8ca 3000 	str.w	r3, [sl]
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	f04f 30ff 	mov.w	r0, #4294967295
 80038a2:	e7e9      	b.n	8003878 <__ssputs_r+0x88>

080038a4 <_svfiprintf_r>:
 80038a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a8:	4698      	mov	r8, r3
 80038aa:	898b      	ldrh	r3, [r1, #12]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	b09d      	sub	sp, #116	; 0x74
 80038b0:	4607      	mov	r7, r0
 80038b2:	460d      	mov	r5, r1
 80038b4:	4614      	mov	r4, r2
 80038b6:	d50e      	bpl.n	80038d6 <_svfiprintf_r+0x32>
 80038b8:	690b      	ldr	r3, [r1, #16]
 80038ba:	b963      	cbnz	r3, 80038d6 <_svfiprintf_r+0x32>
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	f7ff ff0b 	bl	80036d8 <_malloc_r>
 80038c2:	6028      	str	r0, [r5, #0]
 80038c4:	6128      	str	r0, [r5, #16]
 80038c6:	b920      	cbnz	r0, 80038d2 <_svfiprintf_r+0x2e>
 80038c8:	230c      	movs	r3, #12
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	e0d0      	b.n	8003a74 <_svfiprintf_r+0x1d0>
 80038d2:	2340      	movs	r3, #64	; 0x40
 80038d4:	616b      	str	r3, [r5, #20]
 80038d6:	2300      	movs	r3, #0
 80038d8:	9309      	str	r3, [sp, #36]	; 0x24
 80038da:	2320      	movs	r3, #32
 80038dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80038e4:	2330      	movs	r3, #48	; 0x30
 80038e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a8c <_svfiprintf_r+0x1e8>
 80038ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ee:	f04f 0901 	mov.w	r9, #1
 80038f2:	4623      	mov	r3, r4
 80038f4:	469a      	mov	sl, r3
 80038f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038fa:	b10a      	cbz	r2, 8003900 <_svfiprintf_r+0x5c>
 80038fc:	2a25      	cmp	r2, #37	; 0x25
 80038fe:	d1f9      	bne.n	80038f4 <_svfiprintf_r+0x50>
 8003900:	ebba 0b04 	subs.w	fp, sl, r4
 8003904:	d00b      	beq.n	800391e <_svfiprintf_r+0x7a>
 8003906:	465b      	mov	r3, fp
 8003908:	4622      	mov	r2, r4
 800390a:	4629      	mov	r1, r5
 800390c:	4638      	mov	r0, r7
 800390e:	f7ff ff6f 	bl	80037f0 <__ssputs_r>
 8003912:	3001      	adds	r0, #1
 8003914:	f000 80a9 	beq.w	8003a6a <_svfiprintf_r+0x1c6>
 8003918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800391a:	445a      	add	r2, fp
 800391c:	9209      	str	r2, [sp, #36]	; 0x24
 800391e:	f89a 3000 	ldrb.w	r3, [sl]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80a1 	beq.w	8003a6a <_svfiprintf_r+0x1c6>
 8003928:	2300      	movs	r3, #0
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003932:	f10a 0a01 	add.w	sl, sl, #1
 8003936:	9304      	str	r3, [sp, #16]
 8003938:	9307      	str	r3, [sp, #28]
 800393a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800393e:	931a      	str	r3, [sp, #104]	; 0x68
 8003940:	4654      	mov	r4, sl
 8003942:	2205      	movs	r2, #5
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	4850      	ldr	r0, [pc, #320]	; (8003a8c <_svfiprintf_r+0x1e8>)
 800394a:	f7fc fc51 	bl	80001f0 <memchr>
 800394e:	9a04      	ldr	r2, [sp, #16]
 8003950:	b9d8      	cbnz	r0, 800398a <_svfiprintf_r+0xe6>
 8003952:	06d0      	lsls	r0, r2, #27
 8003954:	bf44      	itt	mi
 8003956:	2320      	movmi	r3, #32
 8003958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800395c:	0711      	lsls	r1, r2, #28
 800395e:	bf44      	itt	mi
 8003960:	232b      	movmi	r3, #43	; 0x2b
 8003962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003966:	f89a 3000 	ldrb.w	r3, [sl]
 800396a:	2b2a      	cmp	r3, #42	; 0x2a
 800396c:	d015      	beq.n	800399a <_svfiprintf_r+0xf6>
 800396e:	9a07      	ldr	r2, [sp, #28]
 8003970:	4654      	mov	r4, sl
 8003972:	2000      	movs	r0, #0
 8003974:	f04f 0c0a 	mov.w	ip, #10
 8003978:	4621      	mov	r1, r4
 800397a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800397e:	3b30      	subs	r3, #48	; 0x30
 8003980:	2b09      	cmp	r3, #9
 8003982:	d94d      	bls.n	8003a20 <_svfiprintf_r+0x17c>
 8003984:	b1b0      	cbz	r0, 80039b4 <_svfiprintf_r+0x110>
 8003986:	9207      	str	r2, [sp, #28]
 8003988:	e014      	b.n	80039b4 <_svfiprintf_r+0x110>
 800398a:	eba0 0308 	sub.w	r3, r0, r8
 800398e:	fa09 f303 	lsl.w	r3, r9, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	9304      	str	r3, [sp, #16]
 8003996:	46a2      	mov	sl, r4
 8003998:	e7d2      	b.n	8003940 <_svfiprintf_r+0x9c>
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	1d19      	adds	r1, r3, #4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	9103      	str	r1, [sp, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bfbb      	ittet	lt
 80039a6:	425b      	neglt	r3, r3
 80039a8:	f042 0202 	orrlt.w	r2, r2, #2
 80039ac:	9307      	strge	r3, [sp, #28]
 80039ae:	9307      	strlt	r3, [sp, #28]
 80039b0:	bfb8      	it	lt
 80039b2:	9204      	strlt	r2, [sp, #16]
 80039b4:	7823      	ldrb	r3, [r4, #0]
 80039b6:	2b2e      	cmp	r3, #46	; 0x2e
 80039b8:	d10c      	bne.n	80039d4 <_svfiprintf_r+0x130>
 80039ba:	7863      	ldrb	r3, [r4, #1]
 80039bc:	2b2a      	cmp	r3, #42	; 0x2a
 80039be:	d134      	bne.n	8003a2a <_svfiprintf_r+0x186>
 80039c0:	9b03      	ldr	r3, [sp, #12]
 80039c2:	1d1a      	adds	r2, r3, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	9203      	str	r2, [sp, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bfb8      	it	lt
 80039cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80039d0:	3402      	adds	r4, #2
 80039d2:	9305      	str	r3, [sp, #20]
 80039d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003a9c <_svfiprintf_r+0x1f8>
 80039d8:	7821      	ldrb	r1, [r4, #0]
 80039da:	2203      	movs	r2, #3
 80039dc:	4650      	mov	r0, sl
 80039de:	f7fc fc07 	bl	80001f0 <memchr>
 80039e2:	b138      	cbz	r0, 80039f4 <_svfiprintf_r+0x150>
 80039e4:	9b04      	ldr	r3, [sp, #16]
 80039e6:	eba0 000a 	sub.w	r0, r0, sl
 80039ea:	2240      	movs	r2, #64	; 0x40
 80039ec:	4082      	lsls	r2, r0
 80039ee:	4313      	orrs	r3, r2
 80039f0:	3401      	adds	r4, #1
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f8:	4825      	ldr	r0, [pc, #148]	; (8003a90 <_svfiprintf_r+0x1ec>)
 80039fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039fe:	2206      	movs	r2, #6
 8003a00:	f7fc fbf6 	bl	80001f0 <memchr>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d038      	beq.n	8003a7a <_svfiprintf_r+0x1d6>
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <_svfiprintf_r+0x1f0>)
 8003a0a:	bb1b      	cbnz	r3, 8003a54 <_svfiprintf_r+0x1b0>
 8003a0c:	9b03      	ldr	r3, [sp, #12]
 8003a0e:	3307      	adds	r3, #7
 8003a10:	f023 0307 	bic.w	r3, r3, #7
 8003a14:	3308      	adds	r3, #8
 8003a16:	9303      	str	r3, [sp, #12]
 8003a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1a:	4433      	add	r3, r6
 8003a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1e:	e768      	b.n	80038f2 <_svfiprintf_r+0x4e>
 8003a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a24:	460c      	mov	r4, r1
 8003a26:	2001      	movs	r0, #1
 8003a28:	e7a6      	b.n	8003978 <_svfiprintf_r+0xd4>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	3401      	adds	r4, #1
 8003a2e:	9305      	str	r3, [sp, #20]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f04f 0c0a 	mov.w	ip, #10
 8003a36:	4620      	mov	r0, r4
 8003a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a3c:	3a30      	subs	r2, #48	; 0x30
 8003a3e:	2a09      	cmp	r2, #9
 8003a40:	d903      	bls.n	8003a4a <_svfiprintf_r+0x1a6>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0c6      	beq.n	80039d4 <_svfiprintf_r+0x130>
 8003a46:	9105      	str	r1, [sp, #20]
 8003a48:	e7c4      	b.n	80039d4 <_svfiprintf_r+0x130>
 8003a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a4e:	4604      	mov	r4, r0
 8003a50:	2301      	movs	r3, #1
 8003a52:	e7f0      	b.n	8003a36 <_svfiprintf_r+0x192>
 8003a54:	ab03      	add	r3, sp, #12
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	462a      	mov	r2, r5
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <_svfiprintf_r+0x1f4>)
 8003a5c:	a904      	add	r1, sp, #16
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f3af 8000 	nop.w
 8003a64:	1c42      	adds	r2, r0, #1
 8003a66:	4606      	mov	r6, r0
 8003a68:	d1d6      	bne.n	8003a18 <_svfiprintf_r+0x174>
 8003a6a:	89ab      	ldrh	r3, [r5, #12]
 8003a6c:	065b      	lsls	r3, r3, #25
 8003a6e:	f53f af2d 	bmi.w	80038cc <_svfiprintf_r+0x28>
 8003a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a74:	b01d      	add	sp, #116	; 0x74
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7a:	ab03      	add	r3, sp, #12
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	462a      	mov	r2, r5
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <_svfiprintf_r+0x1f4>)
 8003a82:	a904      	add	r1, sp, #16
 8003a84:	4638      	mov	r0, r7
 8003a86:	f000 f879 	bl	8003b7c <_printf_i>
 8003a8a:	e7eb      	b.n	8003a64 <_svfiprintf_r+0x1c0>
 8003a8c:	08004191 	.word	0x08004191
 8003a90:	0800419b 	.word	0x0800419b
 8003a94:	00000000 	.word	0x00000000
 8003a98:	080037f1 	.word	0x080037f1
 8003a9c:	08004197 	.word	0x08004197

08003aa0 <_printf_common>:
 8003aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	4616      	mov	r6, r2
 8003aa6:	4699      	mov	r9, r3
 8003aa8:	688a      	ldr	r2, [r1, #8]
 8003aaa:	690b      	ldr	r3, [r1, #16]
 8003aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bfb8      	it	lt
 8003ab4:	4613      	movlt	r3, r2
 8003ab6:	6033      	str	r3, [r6, #0]
 8003ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003abc:	4607      	mov	r7, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b10a      	cbz	r2, 8003ac6 <_printf_common+0x26>
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0699      	lsls	r1, r3, #26
 8003aca:	bf42      	ittt	mi
 8003acc:	6833      	ldrmi	r3, [r6, #0]
 8003ace:	3302      	addmi	r3, #2
 8003ad0:	6033      	strmi	r3, [r6, #0]
 8003ad2:	6825      	ldr	r5, [r4, #0]
 8003ad4:	f015 0506 	ands.w	r5, r5, #6
 8003ad8:	d106      	bne.n	8003ae8 <_printf_common+0x48>
 8003ada:	f104 0a19 	add.w	sl, r4, #25
 8003ade:	68e3      	ldr	r3, [r4, #12]
 8003ae0:	6832      	ldr	r2, [r6, #0]
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	42ab      	cmp	r3, r5
 8003ae6:	dc26      	bgt.n	8003b36 <_printf_common+0x96>
 8003ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003aec:	1e13      	subs	r3, r2, #0
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	bf18      	it	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	0692      	lsls	r2, r2, #26
 8003af6:	d42b      	bmi.n	8003b50 <_printf_common+0xb0>
 8003af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003afc:	4649      	mov	r1, r9
 8003afe:	4638      	mov	r0, r7
 8003b00:	47c0      	blx	r8
 8003b02:	3001      	adds	r0, #1
 8003b04:	d01e      	beq.n	8003b44 <_printf_common+0xa4>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	6922      	ldr	r2, [r4, #16]
 8003b0a:	f003 0306 	and.w	r3, r3, #6
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	bf02      	ittt	eq
 8003b12:	68e5      	ldreq	r5, [r4, #12]
 8003b14:	6833      	ldreq	r3, [r6, #0]
 8003b16:	1aed      	subeq	r5, r5, r3
 8003b18:	68a3      	ldr	r3, [r4, #8]
 8003b1a:	bf0c      	ite	eq
 8003b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b20:	2500      	movne	r5, #0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bfc4      	itt	gt
 8003b26:	1a9b      	subgt	r3, r3, r2
 8003b28:	18ed      	addgt	r5, r5, r3
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	341a      	adds	r4, #26
 8003b2e:	42b5      	cmp	r5, r6
 8003b30:	d11a      	bne.n	8003b68 <_printf_common+0xc8>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e008      	b.n	8003b48 <_printf_common+0xa8>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4652      	mov	r2, sl
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	47c0      	blx	r8
 8003b40:	3001      	adds	r0, #1
 8003b42:	d103      	bne.n	8003b4c <_printf_common+0xac>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e7c6      	b.n	8003ade <_printf_common+0x3e>
 8003b50:	18e1      	adds	r1, r4, r3
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	2030      	movs	r0, #48	; 0x30
 8003b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b5a:	4422      	add	r2, r4
 8003b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b64:	3302      	adds	r3, #2
 8003b66:	e7c7      	b.n	8003af8 <_printf_common+0x58>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4638      	mov	r0, r7
 8003b70:	47c0      	blx	r8
 8003b72:	3001      	adds	r0, #1
 8003b74:	d0e6      	beq.n	8003b44 <_printf_common+0xa4>
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7d9      	b.n	8003b2e <_printf_common+0x8e>
	...

08003b7c <_printf_i>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	7e0f      	ldrb	r7, [r1, #24]
 8003b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b84:	2f78      	cmp	r7, #120	; 0x78
 8003b86:	4691      	mov	r9, r2
 8003b88:	4680      	mov	r8, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	469a      	mov	sl, r3
 8003b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b92:	d807      	bhi.n	8003ba4 <_printf_i+0x28>
 8003b94:	2f62      	cmp	r7, #98	; 0x62
 8003b96:	d80a      	bhi.n	8003bae <_printf_i+0x32>
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	f000 80d4 	beq.w	8003d46 <_printf_i+0x1ca>
 8003b9e:	2f58      	cmp	r7, #88	; 0x58
 8003ba0:	f000 80c0 	beq.w	8003d24 <_printf_i+0x1a8>
 8003ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bac:	e03a      	b.n	8003c24 <_printf_i+0xa8>
 8003bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bb2:	2b15      	cmp	r3, #21
 8003bb4:	d8f6      	bhi.n	8003ba4 <_printf_i+0x28>
 8003bb6:	a101      	add	r1, pc, #4	; (adr r1, 8003bbc <_printf_i+0x40>)
 8003bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c29 	.word	0x08003c29
 8003bc4:	08003ba5 	.word	0x08003ba5
 8003bc8:	08003ba5 	.word	0x08003ba5
 8003bcc:	08003ba5 	.word	0x08003ba5
 8003bd0:	08003ba5 	.word	0x08003ba5
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003ba5 	.word	0x08003ba5
 8003bdc:	08003ba5 	.word	0x08003ba5
 8003be0:	08003ba5 	.word	0x08003ba5
 8003be4:	08003ba5 	.word	0x08003ba5
 8003be8:	08003d2d 	.word	0x08003d2d
 8003bec:	08003c55 	.word	0x08003c55
 8003bf0:	08003ce7 	.word	0x08003ce7
 8003bf4:	08003ba5 	.word	0x08003ba5
 8003bf8:	08003ba5 	.word	0x08003ba5
 8003bfc:	08003d4f 	.word	0x08003d4f
 8003c00:	08003ba5 	.word	0x08003ba5
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003ba5 	.word	0x08003ba5
 8003c0c:	08003ba5 	.word	0x08003ba5
 8003c10:	08003cef 	.word	0x08003cef
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c24:	2301      	movs	r3, #1
 8003c26:	e09f      	b.n	8003d68 <_printf_i+0x1ec>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	0607      	lsls	r7, r0, #24
 8003c2e:	f103 0104 	add.w	r1, r3, #4
 8003c32:	6029      	str	r1, [r5, #0]
 8003c34:	d501      	bpl.n	8003c3a <_printf_i+0xbe>
 8003c36:	681e      	ldr	r6, [r3, #0]
 8003c38:	e003      	b.n	8003c42 <_printf_i+0xc6>
 8003c3a:	0646      	lsls	r6, r0, #25
 8003c3c:	d5fb      	bpl.n	8003c36 <_printf_i+0xba>
 8003c3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c42:	2e00      	cmp	r6, #0
 8003c44:	da03      	bge.n	8003c4e <_printf_i+0xd2>
 8003c46:	232d      	movs	r3, #45	; 0x2d
 8003c48:	4276      	negs	r6, r6
 8003c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c4e:	485a      	ldr	r0, [pc, #360]	; (8003db8 <_printf_i+0x23c>)
 8003c50:	230a      	movs	r3, #10
 8003c52:	e012      	b.n	8003c7a <_printf_i+0xfe>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	6820      	ldr	r0, [r4, #0]
 8003c58:	1d19      	adds	r1, r3, #4
 8003c5a:	6029      	str	r1, [r5, #0]
 8003c5c:	0605      	lsls	r5, r0, #24
 8003c5e:	d501      	bpl.n	8003c64 <_printf_i+0xe8>
 8003c60:	681e      	ldr	r6, [r3, #0]
 8003c62:	e002      	b.n	8003c6a <_printf_i+0xee>
 8003c64:	0641      	lsls	r1, r0, #25
 8003c66:	d5fb      	bpl.n	8003c60 <_printf_i+0xe4>
 8003c68:	881e      	ldrh	r6, [r3, #0]
 8003c6a:	4853      	ldr	r0, [pc, #332]	; (8003db8 <_printf_i+0x23c>)
 8003c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c6e:	bf0c      	ite	eq
 8003c70:	2308      	moveq	r3, #8
 8003c72:	230a      	movne	r3, #10
 8003c74:	2100      	movs	r1, #0
 8003c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c7a:	6865      	ldr	r5, [r4, #4]
 8003c7c:	60a5      	str	r5, [r4, #8]
 8003c7e:	2d00      	cmp	r5, #0
 8003c80:	bfa2      	ittt	ge
 8003c82:	6821      	ldrge	r1, [r4, #0]
 8003c84:	f021 0104 	bicge.w	r1, r1, #4
 8003c88:	6021      	strge	r1, [r4, #0]
 8003c8a:	b90e      	cbnz	r6, 8003c90 <_printf_i+0x114>
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	d04b      	beq.n	8003d28 <_printf_i+0x1ac>
 8003c90:	4615      	mov	r5, r2
 8003c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c96:	fb03 6711 	mls	r7, r3, r1, r6
 8003c9a:	5dc7      	ldrb	r7, [r0, r7]
 8003c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ca0:	4637      	mov	r7, r6
 8003ca2:	42bb      	cmp	r3, r7
 8003ca4:	460e      	mov	r6, r1
 8003ca6:	d9f4      	bls.n	8003c92 <_printf_i+0x116>
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d10b      	bne.n	8003cc4 <_printf_i+0x148>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	07de      	lsls	r6, r3, #31
 8003cb0:	d508      	bpl.n	8003cc4 <_printf_i+0x148>
 8003cb2:	6923      	ldr	r3, [r4, #16]
 8003cb4:	6861      	ldr	r1, [r4, #4]
 8003cb6:	4299      	cmp	r1, r3
 8003cb8:	bfde      	ittt	le
 8003cba:	2330      	movle	r3, #48	; 0x30
 8003cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cc4:	1b52      	subs	r2, r2, r5
 8003cc6:	6122      	str	r2, [r4, #16]
 8003cc8:	f8cd a000 	str.w	sl, [sp]
 8003ccc:	464b      	mov	r3, r9
 8003cce:	aa03      	add	r2, sp, #12
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	f7ff fee4 	bl	8003aa0 <_printf_common>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d14a      	bne.n	8003d72 <_printf_i+0x1f6>
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	b004      	add	sp, #16
 8003ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f043 0320 	orr.w	r3, r3, #32
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	4833      	ldr	r0, [pc, #204]	; (8003dbc <_printf_i+0x240>)
 8003cf0:	2778      	movs	r7, #120	; 0x78
 8003cf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	6829      	ldr	r1, [r5, #0]
 8003cfa:	061f      	lsls	r7, r3, #24
 8003cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d00:	d402      	bmi.n	8003d08 <_printf_i+0x18c>
 8003d02:	065f      	lsls	r7, r3, #25
 8003d04:	bf48      	it	mi
 8003d06:	b2b6      	uxthmi	r6, r6
 8003d08:	07df      	lsls	r7, r3, #31
 8003d0a:	bf48      	it	mi
 8003d0c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d10:	6029      	str	r1, [r5, #0]
 8003d12:	bf48      	it	mi
 8003d14:	6023      	strmi	r3, [r4, #0]
 8003d16:	b91e      	cbnz	r6, 8003d20 <_printf_i+0x1a4>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	f023 0320 	bic.w	r3, r3, #32
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	2310      	movs	r3, #16
 8003d22:	e7a7      	b.n	8003c74 <_printf_i+0xf8>
 8003d24:	4824      	ldr	r0, [pc, #144]	; (8003db8 <_printf_i+0x23c>)
 8003d26:	e7e4      	b.n	8003cf2 <_printf_i+0x176>
 8003d28:	4615      	mov	r5, r2
 8003d2a:	e7bd      	b.n	8003ca8 <_printf_i+0x12c>
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	6826      	ldr	r6, [r4, #0]
 8003d30:	6961      	ldr	r1, [r4, #20]
 8003d32:	1d18      	adds	r0, r3, #4
 8003d34:	6028      	str	r0, [r5, #0]
 8003d36:	0635      	lsls	r5, r6, #24
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	d501      	bpl.n	8003d40 <_printf_i+0x1c4>
 8003d3c:	6019      	str	r1, [r3, #0]
 8003d3e:	e002      	b.n	8003d46 <_printf_i+0x1ca>
 8003d40:	0670      	lsls	r0, r6, #25
 8003d42:	d5fb      	bpl.n	8003d3c <_printf_i+0x1c0>
 8003d44:	8019      	strh	r1, [r3, #0]
 8003d46:	2300      	movs	r3, #0
 8003d48:	6123      	str	r3, [r4, #16]
 8003d4a:	4615      	mov	r5, r2
 8003d4c:	e7bc      	b.n	8003cc8 <_printf_i+0x14c>
 8003d4e:	682b      	ldr	r3, [r5, #0]
 8003d50:	1d1a      	adds	r2, r3, #4
 8003d52:	602a      	str	r2, [r5, #0]
 8003d54:	681d      	ldr	r5, [r3, #0]
 8003d56:	6862      	ldr	r2, [r4, #4]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f7fc fa48 	bl	80001f0 <memchr>
 8003d60:	b108      	cbz	r0, 8003d66 <_printf_i+0x1ea>
 8003d62:	1b40      	subs	r0, r0, r5
 8003d64:	6060      	str	r0, [r4, #4]
 8003d66:	6863      	ldr	r3, [r4, #4]
 8003d68:	6123      	str	r3, [r4, #16]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d70:	e7aa      	b.n	8003cc8 <_printf_i+0x14c>
 8003d72:	6923      	ldr	r3, [r4, #16]
 8003d74:	462a      	mov	r2, r5
 8003d76:	4649      	mov	r1, r9
 8003d78:	4640      	mov	r0, r8
 8003d7a:	47d0      	blx	sl
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d0ad      	beq.n	8003cdc <_printf_i+0x160>
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	079b      	lsls	r3, r3, #30
 8003d84:	d413      	bmi.n	8003dae <_printf_i+0x232>
 8003d86:	68e0      	ldr	r0, [r4, #12]
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	4298      	cmp	r0, r3
 8003d8c:	bfb8      	it	lt
 8003d8e:	4618      	movlt	r0, r3
 8003d90:	e7a6      	b.n	8003ce0 <_printf_i+0x164>
 8003d92:	2301      	movs	r3, #1
 8003d94:	4632      	mov	r2, r6
 8003d96:	4649      	mov	r1, r9
 8003d98:	4640      	mov	r0, r8
 8003d9a:	47d0      	blx	sl
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d09d      	beq.n	8003cdc <_printf_i+0x160>
 8003da0:	3501      	adds	r5, #1
 8003da2:	68e3      	ldr	r3, [r4, #12]
 8003da4:	9903      	ldr	r1, [sp, #12]
 8003da6:	1a5b      	subs	r3, r3, r1
 8003da8:	42ab      	cmp	r3, r5
 8003daa:	dcf2      	bgt.n	8003d92 <_printf_i+0x216>
 8003dac:	e7eb      	b.n	8003d86 <_printf_i+0x20a>
 8003dae:	2500      	movs	r5, #0
 8003db0:	f104 0619 	add.w	r6, r4, #25
 8003db4:	e7f5      	b.n	8003da2 <_printf_i+0x226>
 8003db6:	bf00      	nop
 8003db8:	080041a2 	.word	0x080041a2
 8003dbc:	080041b3 	.word	0x080041b3

08003dc0 <memmove>:
 8003dc0:	4288      	cmp	r0, r1
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	eb01 0402 	add.w	r4, r1, r2
 8003dc8:	d902      	bls.n	8003dd0 <memmove+0x10>
 8003dca:	4284      	cmp	r4, r0
 8003dcc:	4623      	mov	r3, r4
 8003dce:	d807      	bhi.n	8003de0 <memmove+0x20>
 8003dd0:	1e43      	subs	r3, r0, #1
 8003dd2:	42a1      	cmp	r1, r4
 8003dd4:	d008      	beq.n	8003de8 <memmove+0x28>
 8003dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dde:	e7f8      	b.n	8003dd2 <memmove+0x12>
 8003de0:	4402      	add	r2, r0
 8003de2:	4601      	mov	r1, r0
 8003de4:	428a      	cmp	r2, r1
 8003de6:	d100      	bne.n	8003dea <memmove+0x2a>
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003df2:	e7f7      	b.n	8003de4 <memmove+0x24>

08003df4 <_sbrk_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4d06      	ldr	r5, [pc, #24]	; (8003e10 <_sbrk_r+0x1c>)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	f7fd fa58 	bl	80012b4 <_sbrk>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_sbrk_r+0x1a>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_sbrk_r+0x1a>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000f38 	.word	0x20000f38

08003e14 <_realloc_r>:
 8003e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e18:	4680      	mov	r8, r0
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	460e      	mov	r6, r1
 8003e1e:	b921      	cbnz	r1, 8003e2a <_realloc_r+0x16>
 8003e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e24:	4611      	mov	r1, r2
 8003e26:	f7ff bc57 	b.w	80036d8 <_malloc_r>
 8003e2a:	b92a      	cbnz	r2, 8003e38 <_realloc_r+0x24>
 8003e2c:	f7ff fbe8 	bl	8003600 <_free_r>
 8003e30:	4625      	mov	r5, r4
 8003e32:	4628      	mov	r0, r5
 8003e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e38:	f000 f81b 	bl	8003e72 <_malloc_usable_size_r>
 8003e3c:	4284      	cmp	r4, r0
 8003e3e:	4607      	mov	r7, r0
 8003e40:	d802      	bhi.n	8003e48 <_realloc_r+0x34>
 8003e42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e46:	d812      	bhi.n	8003e6e <_realloc_r+0x5a>
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	f7ff fc44 	bl	80036d8 <_malloc_r>
 8003e50:	4605      	mov	r5, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0ed      	beq.n	8003e32 <_realloc_r+0x1e>
 8003e56:	42bc      	cmp	r4, r7
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	bf28      	it	cs
 8003e5e:	463a      	movcs	r2, r7
 8003e60:	f7ff fbc0 	bl	80035e4 <memcpy>
 8003e64:	4631      	mov	r1, r6
 8003e66:	4640      	mov	r0, r8
 8003e68:	f7ff fbca 	bl	8003600 <_free_r>
 8003e6c:	e7e1      	b.n	8003e32 <_realloc_r+0x1e>
 8003e6e:	4635      	mov	r5, r6
 8003e70:	e7df      	b.n	8003e32 <_realloc_r+0x1e>

08003e72 <_malloc_usable_size_r>:
 8003e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e76:	1f18      	subs	r0, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bfbc      	itt	lt
 8003e7c:	580b      	ldrlt	r3, [r1, r0]
 8003e7e:	18c0      	addlt	r0, r0, r3
 8003e80:	4770      	bx	lr
	...

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
